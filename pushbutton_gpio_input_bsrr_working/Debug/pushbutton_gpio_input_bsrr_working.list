
pushbutton_gpio_input_bsrr_working.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003c4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800055c  08000564  00010564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800055c  0800055c  00010564  2**0
                  CONTENTS
  4 .ARM          00000000  0800055c  0800055c  00010564  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800055c  08000564  00010564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800055c  0800055c  0001055c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000560  08000560  00010560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000564  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000564  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010564  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010594  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000383  00000000  00000000  000105d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000011d  00000000  00000000  0001095a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00010a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000046  00000000  00000000  00010ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dbb0  00000000  00000000  00010b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000673  00000000  00000000  0001e6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004f672  00000000  00000000  0001ed49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000e0  00000000  00000000  0006e3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0006e49c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000544 	.word	0x08000544

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000544 	.word	0x08000544

080001d8 <main>:

void loop_test_porta(void);
void loop_test_porta_clear(void);

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b5f      	ldr	r3, [pc, #380]	; (800035c <main+0x184>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a5e      	ldr	r2, [pc, #376]	; (800035c <main+0x184>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= GPIOCEN;
 80001e8:	4b5c      	ldr	r3, [pc, #368]	; (800035c <main+0x184>)
 80001ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ec:	4a5b      	ldr	r2, [pc, #364]	; (800035c <main+0x184>)
 80001ee:	f043 0304 	orr.w	r3, r3, #4
 80001f2:	6313      	str	r3, [r2, #48]	; 0x30

	/*set pin A0 as an output pin*/
	GPIOA->MODER |= (1U<<0);
 80001f4:	4b5a      	ldr	r3, [pc, #360]	; (8000360 <main+0x188>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a59      	ldr	r2, [pc, #356]	; (8000360 <main+0x188>)
 80001fa:	f043 0301 	orr.w	r3, r3, #1
 80001fe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<1);
 8000200:	4b57      	ldr	r3, [pc, #348]	; (8000360 <main+0x188>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a56      	ldr	r2, [pc, #344]	; (8000360 <main+0x188>)
 8000206:	f023 0302 	bic.w	r3, r3, #2
 800020a:	6013      	str	r3, [r2, #0]

	/*set pin A1 as an output pin*/
	GPIOA->MODER |= (1U<<2);
 800020c:	4b54      	ldr	r3, [pc, #336]	; (8000360 <main+0x188>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a53      	ldr	r2, [pc, #332]	; (8000360 <main+0x188>)
 8000212:	f043 0304 	orr.w	r3, r3, #4
 8000216:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<3);
 8000218:	4b51      	ldr	r3, [pc, #324]	; (8000360 <main+0x188>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a50      	ldr	r2, [pc, #320]	; (8000360 <main+0x188>)
 800021e:	f023 0308 	bic.w	r3, r3, #8
 8000222:	6013      	str	r3, [r2, #0]

	/*set pin A2 as an output pin*/
	GPIOA->MODER |= (1U<<4);
 8000224:	4b4e      	ldr	r3, [pc, #312]	; (8000360 <main+0x188>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a4d      	ldr	r2, [pc, #308]	; (8000360 <main+0x188>)
 800022a:	f043 0310 	orr.w	r3, r3, #16
 800022e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<5);
 8000230:	4b4b      	ldr	r3, [pc, #300]	; (8000360 <main+0x188>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a4a      	ldr	r2, [pc, #296]	; (8000360 <main+0x188>)
 8000236:	f023 0320 	bic.w	r3, r3, #32
 800023a:	6013      	str	r3, [r2, #0]

	/*set pin A3 as an output pin*/
	GPIOA->MODER |= (1U<<6);
 800023c:	4b48      	ldr	r3, [pc, #288]	; (8000360 <main+0x188>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a47      	ldr	r2, [pc, #284]	; (8000360 <main+0x188>)
 8000242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000246:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<7);
 8000248:	4b45      	ldr	r3, [pc, #276]	; (8000360 <main+0x188>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a44      	ldr	r2, [pc, #272]	; (8000360 <main+0x188>)
 800024e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000252:	6013      	str	r3, [r2, #0]

	/*set pin A4 as an output pin*/
	GPIOA->MODER |= (1U<<8);
 8000254:	4b42      	ldr	r3, [pc, #264]	; (8000360 <main+0x188>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a41      	ldr	r2, [pc, #260]	; (8000360 <main+0x188>)
 800025a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800025e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<9);
 8000260:	4b3f      	ldr	r3, [pc, #252]	; (8000360 <main+0x188>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a3e      	ldr	r2, [pc, #248]	; (8000360 <main+0x188>)
 8000266:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800026a:	6013      	str	r3, [r2, #0]

	//set pin A5 as an output pin
	GPIOA->MODER |= (1U<<10);
 800026c:	4b3c      	ldr	r3, [pc, #240]	; (8000360 <main+0x188>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a3b      	ldr	r2, [pc, #236]	; (8000360 <main+0x188>)
 8000272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000276:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 8000278:	4b39      	ldr	r3, [pc, #228]	; (8000360 <main+0x188>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a38      	ldr	r2, [pc, #224]	; (8000360 <main+0x188>)
 800027e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000282:	6013      	str	r3, [r2, #0]

	//set pin A6 as an output pin
	GPIOA->MODER |= (1U<<12);
 8000284:	4b36      	ldr	r3, [pc, #216]	; (8000360 <main+0x188>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a35      	ldr	r2, [pc, #212]	; (8000360 <main+0x188>)
 800028a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800028e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<13);
 8000290:	4b33      	ldr	r3, [pc, #204]	; (8000360 <main+0x188>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a32      	ldr	r2, [pc, #200]	; (8000360 <main+0x188>)
 8000296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800029a:	6013      	str	r3, [r2, #0]

	//set pin A7 as an output pin
	GPIOA->MODER |= (1U<<14);
 800029c:	4b30      	ldr	r3, [pc, #192]	; (8000360 <main+0x188>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a2f      	ldr	r2, [pc, #188]	; (8000360 <main+0x188>)
 80002a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<15);
 80002a8:	4b2d      	ldr	r3, [pc, #180]	; (8000360 <main+0x188>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a2c      	ldr	r2, [pc, #176]	; (8000360 <main+0x188>)
 80002ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002b2:	6013      	str	r3, [r2, #0]

	//set pin A8 as an output pin
	GPIOA->MODER |= (1U<<16);
 80002b4:	4b2a      	ldr	r3, [pc, #168]	; (8000360 <main+0x188>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a29      	ldr	r2, [pc, #164]	; (8000360 <main+0x188>)
 80002ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002be:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<17);
 80002c0:	4b27      	ldr	r3, [pc, #156]	; (8000360 <main+0x188>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a26      	ldr	r2, [pc, #152]	; (8000360 <main+0x188>)
 80002c6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80002ca:	6013      	str	r3, [r2, #0]

	//set pin A9 as an output pin
	GPIOA->MODER |= (1U<<18);
 80002cc:	4b24      	ldr	r3, [pc, #144]	; (8000360 <main+0x188>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a23      	ldr	r2, [pc, #140]	; (8000360 <main+0x188>)
 80002d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<19);
 80002d8:	4b21      	ldr	r3, [pc, #132]	; (8000360 <main+0x188>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a20      	ldr	r2, [pc, #128]	; (8000360 <main+0x188>)
 80002de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80002e2:	6013      	str	r3, [r2, #0]

	//set pin A10 as an output pin
	GPIOA->MODER |= (1U<<20);
 80002e4:	4b1e      	ldr	r3, [pc, #120]	; (8000360 <main+0x188>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a1d      	ldr	r2, [pc, #116]	; (8000360 <main+0x188>)
 80002ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002ee:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<21);
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <main+0x188>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a1a      	ldr	r2, [pc, #104]	; (8000360 <main+0x188>)
 80002f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80002fa:	6013      	str	r3, [r2, #0]

	//set pin A11 as an output pin
	GPIOA->MODER |= (1U<<22);
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <main+0x188>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a17      	ldr	r2, [pc, #92]	; (8000360 <main+0x188>)
 8000302:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000306:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<23);
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <main+0x188>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a14      	ldr	r2, [pc, #80]	; (8000360 <main+0x188>)
 800030e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000312:	6013      	str	r3, [r2, #0]

	//set pin A12 as an output pin
	GPIOA->MODER |= (1U<<24);
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <main+0x188>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a11      	ldr	r2, [pc, #68]	; (8000360 <main+0x188>)
 800031a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800031e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<25);
 8000320:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <main+0x188>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a0e      	ldr	r2, [pc, #56]	; (8000360 <main+0x188>)
 8000326:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800032a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<30);
	GPIOA->MODER &=~(1U<<31);
*/

	/*Set PINC13 as input pin*/
	GPIOC->MODER &=~(1U<<26);
 800032c:	4b0d      	ldr	r3, [pc, #52]	; (8000364 <main+0x18c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a0c      	ldr	r2, [pc, #48]	; (8000364 <main+0x18c>)
 8000332:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000336:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 8000338:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <main+0x18c>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a09      	ldr	r2, [pc, #36]	; (8000364 <main+0x18c>)
 800033e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000342:	6013      	str	r3, [r2, #0]

    while(1) {

        if (GPIOC->IDR & 0x2000) {
 8000344:	4b07      	ldr	r3, [pc, #28]	; (8000364 <main+0x18c>)
 8000346:	691b      	ldr	r3, [r3, #16]
 8000348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800034c:	2b00      	cmp	r3, #0
 800034e:	d002      	beq.n	8000356 <main+0x17e>

            loop_test_porta_clear();
 8000350:	f000 f870 	bl	8000434 <loop_test_porta_clear>
 8000354:	e7f6      	b.n	8000344 <main+0x16c>

        } else {

        	loop_test_porta();
 8000356:	f000 f807 	bl	8000368 <loop_test_porta>
        if (GPIOC->IDR & 0x2000) {
 800035a:	e7f3      	b.n	8000344 <main+0x16c>
 800035c:	40023800 	.word	0x40023800
 8000360:	40020000 	.word	0x40020000
 8000364:	40020800 	.word	0x40020800

08000368 <loop_test_porta>:
        }
    }

}

void loop_test_porta(void) {
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
    GPIOA->BSRR = 0b00000000000000000010000000000000;
    my_delay_long();
    loop_test_porta_clear();
*/
	//A12
    GPIOA->BSRR = 0b00000000000000000001000000000000;
 800036c:	4b30      	ldr	r3, [pc, #192]	; (8000430 <loop_test_porta+0xc8>)
 800036e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000372:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000374:	f000 f86c 	bl	8000450 <my_delay_long>
    loop_test_porta_clear();
 8000378:	f000 f85c 	bl	8000434 <loop_test_porta_clear>

	//A11
    GPIOA->BSRR = 0b00000000000000000000100000000000;
 800037c:	4b2c      	ldr	r3, [pc, #176]	; (8000430 <loop_test_porta+0xc8>)
 800037e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000382:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000384:	f000 f864 	bl	8000450 <my_delay_long>
    loop_test_porta_clear();
 8000388:	f000 f854 	bl	8000434 <loop_test_porta_clear>

	//A10
    GPIOA->BSRR = 0b00000000000000000000010000000000;
 800038c:	4b28      	ldr	r3, [pc, #160]	; (8000430 <loop_test_porta+0xc8>)
 800038e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000392:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000394:	f000 f85c 	bl	8000450 <my_delay_long>
    loop_test_porta_clear();
 8000398:	f000 f84c 	bl	8000434 <loop_test_porta_clear>

	//A9
    GPIOA->BSRR = 0b00000000000000000000001000000000;
 800039c:	4b24      	ldr	r3, [pc, #144]	; (8000430 <loop_test_porta+0xc8>)
 800039e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a2:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80003a4:	f000 f854 	bl	8000450 <my_delay_long>
    loop_test_porta_clear();
 80003a8:	f000 f844 	bl	8000434 <loop_test_porta_clear>

	//A8
    GPIOA->BSRR = 0b00000000000000000000000100000000;
 80003ac:	4b20      	ldr	r3, [pc, #128]	; (8000430 <loop_test_porta+0xc8>)
 80003ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003b2:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80003b4:	f000 f84c 	bl	8000450 <my_delay_long>
    loop_test_porta_clear();
 80003b8:	f000 f83c 	bl	8000434 <loop_test_porta_clear>

	//A7
    GPIOA->BSRR = 0b00000000000000000000000010000000;
 80003bc:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <loop_test_porta+0xc8>)
 80003be:	2280      	movs	r2, #128	; 0x80
 80003c0:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80003c2:	f000 f845 	bl	8000450 <my_delay_long>
    loop_test_porta_clear();
 80003c6:	f000 f835 	bl	8000434 <loop_test_porta_clear>

    //A6
    GPIOA->BSRR = 0b00000000000000000000000001000000;
 80003ca:	4b19      	ldr	r3, [pc, #100]	; (8000430 <loop_test_porta+0xc8>)
 80003cc:	2240      	movs	r2, #64	; 0x40
 80003ce:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80003d0:	f000 f83e 	bl	8000450 <my_delay_long>
    loop_test_porta_clear();
 80003d4:	f000 f82e 	bl	8000434 <loop_test_porta_clear>

    //A5
    GPIOA->BSRR = 0b00000000000000000000000000100000;
 80003d8:	4b15      	ldr	r3, [pc, #84]	; (8000430 <loop_test_porta+0xc8>)
 80003da:	2220      	movs	r2, #32
 80003dc:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80003de:	f000 f837 	bl	8000450 <my_delay_long>
    loop_test_porta_clear();
 80003e2:	f000 f827 	bl	8000434 <loop_test_porta_clear>

    //A4
    GPIOA->BSRR = 0b00000000000000000000000000010000;
 80003e6:	4b12      	ldr	r3, [pc, #72]	; (8000430 <loop_test_porta+0xc8>)
 80003e8:	2210      	movs	r2, #16
 80003ea:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80003ec:	f000 f830 	bl	8000450 <my_delay_long>
    loop_test_porta_clear();
 80003f0:	f000 f820 	bl	8000434 <loop_test_porta_clear>

    //A3
    GPIOA->BSRR = 0b00000000000000000000000000001000;
 80003f4:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <loop_test_porta+0xc8>)
 80003f6:	2208      	movs	r2, #8
 80003f8:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80003fa:	f000 f829 	bl	8000450 <my_delay_long>
    loop_test_porta_clear();
 80003fe:	f000 f819 	bl	8000434 <loop_test_porta_clear>

    //A2
    GPIOA->BSRR = 0b00000000000000000000000000000100;
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <loop_test_porta+0xc8>)
 8000404:	2204      	movs	r2, #4
 8000406:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000408:	f000 f822 	bl	8000450 <my_delay_long>
    loop_test_porta_clear();
 800040c:	f000 f812 	bl	8000434 <loop_test_porta_clear>

    //A1
    GPIOA->BSRR = 0b00000000000000000000000000000010;
 8000410:	4b07      	ldr	r3, [pc, #28]	; (8000430 <loop_test_porta+0xc8>)
 8000412:	2202      	movs	r2, #2
 8000414:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000416:	f000 f81b 	bl	8000450 <my_delay_long>
    loop_test_porta_clear();
 800041a:	f000 f80b 	bl	8000434 <loop_test_porta_clear>

    //A0
    GPIOA->BSRR = 0b00000000000000000000000000000001;
 800041e:	4b04      	ldr	r3, [pc, #16]	; (8000430 <loop_test_porta+0xc8>)
 8000420:	2201      	movs	r2, #1
 8000422:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000424:	f000 f814 	bl	8000450 <my_delay_long>
    loop_test_porta_clear();
 8000428:	f000 f804 	bl	8000434 <loop_test_porta_clear>

}
 800042c:	bf00      	nop
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40020000 	.word	0x40020000

08000434 <loop_test_porta_clear>:

void loop_test_porta_clear(void) {
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
//	GPIOA->BSRR = 0b11111111111111110000000000000000;
	GPIOA->BSRR = 0b00011111111111110000000000000000;
 8000438:	4b03      	ldr	r3, [pc, #12]	; (8000448 <loop_test_porta_clear+0x14>)
 800043a:	4a04      	ldr	r2, [pc, #16]	; (800044c <loop_test_porta_clear+0x18>)
 800043c:	619a      	str	r2, [r3, #24]
    my_delay_short();
 800043e:	f000 f81d 	bl	800047c <my_delay_short>
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40020000 	.word	0x40020000
 800044c:	1fff0000 	.word	0x1fff0000

08000450 <my_delay_long>:

void my_delay_long(void) {
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
    for(int i=0;i<1000000;i++){
 8000456:	2300      	movs	r3, #0
 8000458:	607b      	str	r3, [r7, #4]
 800045a:	e002      	b.n	8000462 <my_delay_long+0x12>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3301      	adds	r3, #1
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <my_delay_long+0x28>)
 8000466:	4293      	cmp	r3, r2
 8000468:	ddf8      	ble.n	800045c <my_delay_long+0xc>
		//do nothing
	}
}
 800046a:	bf00      	nop
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	000f423f 	.word	0x000f423f

0800047c <my_delay_short>:

void my_delay_short(void) {
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
    for(int i=0;i<100000;i++){
 8000482:	2300      	movs	r3, #0
 8000484:	607b      	str	r3, [r7, #4]
 8000486:	e002      	b.n	800048e <my_delay_short+0x12>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	3301      	adds	r3, #1
 800048c:	607b      	str	r3, [r7, #4]
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <my_delay_short+0x28>)
 8000492:	4293      	cmp	r3, r2
 8000494:	ddf8      	ble.n	8000488 <my_delay_short+0xc>
		//do nothing
	}
}
 8000496:	bf00      	nop
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	0001869f 	.word	0x0001869f

080004a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004a8:	480d      	ldr	r0, [pc, #52]	; (80004e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004b0:	480c      	ldr	r0, [pc, #48]	; (80004e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80004b2:	490d      	ldr	r1, [pc, #52]	; (80004e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004b4:	4a0d      	ldr	r2, [pc, #52]	; (80004ec <LoopForever+0xe>)
  movs r3, #0
 80004b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004b8:	e002      	b.n	80004c0 <LoopCopyDataInit>

080004ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004be:	3304      	adds	r3, #4

080004c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004c4:	d3f9      	bcc.n	80004ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004c6:	4a0a      	ldr	r2, [pc, #40]	; (80004f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004c8:	4c0a      	ldr	r4, [pc, #40]	; (80004f4 <LoopForever+0x16>)
  movs r3, #0
 80004ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004cc:	e001      	b.n	80004d2 <LoopFillZerobss>

080004ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004d0:	3204      	adds	r2, #4

080004d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004d4:	d3fb      	bcc.n	80004ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004d6:	f000 f811 	bl	80004fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004da:	f7ff fe7d 	bl	80001d8 <main>

080004de <LoopForever>:

LoopForever:
  b LoopForever
 80004de:	e7fe      	b.n	80004de <LoopForever>
  ldr   r0, =_estack
 80004e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004ec:	08000564 	.word	0x08000564
  ldr r2, =_sbss
 80004f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004f4:	2000001c 	.word	0x2000001c

080004f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004f8:	e7fe      	b.n	80004f8 <ADC_IRQHandler>
	...

080004fc <__libc_init_array>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	4d0d      	ldr	r5, [pc, #52]	; (8000534 <__libc_init_array+0x38>)
 8000500:	4c0d      	ldr	r4, [pc, #52]	; (8000538 <__libc_init_array+0x3c>)
 8000502:	1b64      	subs	r4, r4, r5
 8000504:	10a4      	asrs	r4, r4, #2
 8000506:	2600      	movs	r6, #0
 8000508:	42a6      	cmp	r6, r4
 800050a:	d109      	bne.n	8000520 <__libc_init_array+0x24>
 800050c:	4d0b      	ldr	r5, [pc, #44]	; (800053c <__libc_init_array+0x40>)
 800050e:	4c0c      	ldr	r4, [pc, #48]	; (8000540 <__libc_init_array+0x44>)
 8000510:	f000 f818 	bl	8000544 <_init>
 8000514:	1b64      	subs	r4, r4, r5
 8000516:	10a4      	asrs	r4, r4, #2
 8000518:	2600      	movs	r6, #0
 800051a:	42a6      	cmp	r6, r4
 800051c:	d105      	bne.n	800052a <__libc_init_array+0x2e>
 800051e:	bd70      	pop	{r4, r5, r6, pc}
 8000520:	f855 3b04 	ldr.w	r3, [r5], #4
 8000524:	4798      	blx	r3
 8000526:	3601      	adds	r6, #1
 8000528:	e7ee      	b.n	8000508 <__libc_init_array+0xc>
 800052a:	f855 3b04 	ldr.w	r3, [r5], #4
 800052e:	4798      	blx	r3
 8000530:	3601      	adds	r6, #1
 8000532:	e7f2      	b.n	800051a <__libc_init_array+0x1e>
 8000534:	0800055c 	.word	0x0800055c
 8000538:	0800055c 	.word	0x0800055c
 800053c:	0800055c 	.word	0x0800055c
 8000540:	08000560 	.word	0x08000560

08000544 <_init>:
 8000544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000546:	bf00      	nop
 8000548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054a:	bc08      	pop	{r3}
 800054c:	469e      	mov	lr, r3
 800054e:	4770      	bx	lr

08000550 <_fini>:
 8000550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000552:	bf00      	nop
 8000554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000556:	bc08      	pop	{r3}
 8000558:	469e      	mov	lr, r3
 800055a:	4770      	bx	lr
