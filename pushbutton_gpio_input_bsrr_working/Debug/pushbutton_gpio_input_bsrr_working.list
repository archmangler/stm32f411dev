
pushbutton_gpio_input_bsrr_working.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000880  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a18  08000a20  00010a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a18  08000a18  00010a20  2**0
                  CONTENTS
  4 .ARM          00000000  08000a18  08000a18  00010a20  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a18  08000a20  00010a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a18  08000a18  00010a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a1c  08000a1c  00010a1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000a20  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000a20  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010a20  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010a50  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000508  00000000  00000000  00010a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000150  00000000  00000000  00010f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c0  00000000  00000000  000110f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000008b  00000000  00000000  000111b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dbb0  00000000  00000000  0001123b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000a3c  00000000  00000000  0001edeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004f731  00000000  00000000  0001f827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000258  00000000  00000000  0006ef58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0006f1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000a00 	.word	0x08000a00

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000a00 	.word	0x08000a00

080001d8 <main>:
void inc_rev_a1(void);

void loop_test_porta_clear(void);

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b8a      	ldr	r3, [pc, #552]	; (8000408 <main+0x230>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a89      	ldr	r2, [pc, #548]	; (8000408 <main+0x230>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= GPIOCEN;
 80001e8:	4b87      	ldr	r3, [pc, #540]	; (8000408 <main+0x230>)
 80001ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ec:	4a86      	ldr	r2, [pc, #536]	; (8000408 <main+0x230>)
 80001ee:	f043 0304 	orr.w	r3, r3, #4
 80001f2:	6313      	str	r3, [r2, #48]	; 0x30

	/*set pin A0 as an output pin*/
	GPIOA->MODER |= (1U<<0);
 80001f4:	4b85      	ldr	r3, [pc, #532]	; (800040c <main+0x234>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a84      	ldr	r2, [pc, #528]	; (800040c <main+0x234>)
 80001fa:	f043 0301 	orr.w	r3, r3, #1
 80001fe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<1);
 8000200:	4b82      	ldr	r3, [pc, #520]	; (800040c <main+0x234>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a81      	ldr	r2, [pc, #516]	; (800040c <main+0x234>)
 8000206:	f023 0302 	bic.w	r3, r3, #2
 800020a:	6013      	str	r3, [r2, #0]

	/*set pin A1 as an output pin*/
	GPIOA->MODER |= (1U<<2);
 800020c:	4b7f      	ldr	r3, [pc, #508]	; (800040c <main+0x234>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a7e      	ldr	r2, [pc, #504]	; (800040c <main+0x234>)
 8000212:	f043 0304 	orr.w	r3, r3, #4
 8000216:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<3);
 8000218:	4b7c      	ldr	r3, [pc, #496]	; (800040c <main+0x234>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a7b      	ldr	r2, [pc, #492]	; (800040c <main+0x234>)
 800021e:	f023 0308 	bic.w	r3, r3, #8
 8000222:	6013      	str	r3, [r2, #0]

	/*set pin A2 as an output pin*/
	GPIOA->MODER |= (1U<<4);
 8000224:	4b79      	ldr	r3, [pc, #484]	; (800040c <main+0x234>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a78      	ldr	r2, [pc, #480]	; (800040c <main+0x234>)
 800022a:	f043 0310 	orr.w	r3, r3, #16
 800022e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<5);
 8000230:	4b76      	ldr	r3, [pc, #472]	; (800040c <main+0x234>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a75      	ldr	r2, [pc, #468]	; (800040c <main+0x234>)
 8000236:	f023 0320 	bic.w	r3, r3, #32
 800023a:	6013      	str	r3, [r2, #0]

	/*set pin A3 as an output pin*/
	GPIOA->MODER |= (1U<<6);
 800023c:	4b73      	ldr	r3, [pc, #460]	; (800040c <main+0x234>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a72      	ldr	r2, [pc, #456]	; (800040c <main+0x234>)
 8000242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000246:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<7);
 8000248:	4b70      	ldr	r3, [pc, #448]	; (800040c <main+0x234>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a6f      	ldr	r2, [pc, #444]	; (800040c <main+0x234>)
 800024e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000252:	6013      	str	r3, [r2, #0]

	/*set pin A4 as an output pin*/
	GPIOA->MODER |= (1U<<8);
 8000254:	4b6d      	ldr	r3, [pc, #436]	; (800040c <main+0x234>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a6c      	ldr	r2, [pc, #432]	; (800040c <main+0x234>)
 800025a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800025e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<9);
 8000260:	4b6a      	ldr	r3, [pc, #424]	; (800040c <main+0x234>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a69      	ldr	r2, [pc, #420]	; (800040c <main+0x234>)
 8000266:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800026a:	6013      	str	r3, [r2, #0]

	//set pin A5 as an output pin
	GPIOA->MODER |= (1U<<10);
 800026c:	4b67      	ldr	r3, [pc, #412]	; (800040c <main+0x234>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a66      	ldr	r2, [pc, #408]	; (800040c <main+0x234>)
 8000272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000276:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 8000278:	4b64      	ldr	r3, [pc, #400]	; (800040c <main+0x234>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a63      	ldr	r2, [pc, #396]	; (800040c <main+0x234>)
 800027e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000282:	6013      	str	r3, [r2, #0]

	//set pin A6 as an output pin
	GPIOA->MODER |= (1U<<12);
 8000284:	4b61      	ldr	r3, [pc, #388]	; (800040c <main+0x234>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a60      	ldr	r2, [pc, #384]	; (800040c <main+0x234>)
 800028a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800028e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<13);
 8000290:	4b5e      	ldr	r3, [pc, #376]	; (800040c <main+0x234>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a5d      	ldr	r2, [pc, #372]	; (800040c <main+0x234>)
 8000296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800029a:	6013      	str	r3, [r2, #0]

	//set pin A7 as an output pin
	GPIOA->MODER |= (1U<<14);
 800029c:	4b5b      	ldr	r3, [pc, #364]	; (800040c <main+0x234>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a5a      	ldr	r2, [pc, #360]	; (800040c <main+0x234>)
 80002a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<15);
 80002a8:	4b58      	ldr	r3, [pc, #352]	; (800040c <main+0x234>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a57      	ldr	r2, [pc, #348]	; (800040c <main+0x234>)
 80002ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002b2:	6013      	str	r3, [r2, #0]

	//set pin A8 as an output pin
	GPIOA->MODER |= (1U<<16);
 80002b4:	4b55      	ldr	r3, [pc, #340]	; (800040c <main+0x234>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a54      	ldr	r2, [pc, #336]	; (800040c <main+0x234>)
 80002ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002be:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<17);
 80002c0:	4b52      	ldr	r3, [pc, #328]	; (800040c <main+0x234>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a51      	ldr	r2, [pc, #324]	; (800040c <main+0x234>)
 80002c6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80002ca:	6013      	str	r3, [r2, #0]

	//set pin A9 as an output pin
	GPIOA->MODER |= (1U<<18);
 80002cc:	4b4f      	ldr	r3, [pc, #316]	; (800040c <main+0x234>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a4e      	ldr	r2, [pc, #312]	; (800040c <main+0x234>)
 80002d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<19);
 80002d8:	4b4c      	ldr	r3, [pc, #304]	; (800040c <main+0x234>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a4b      	ldr	r2, [pc, #300]	; (800040c <main+0x234>)
 80002de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80002e2:	6013      	str	r3, [r2, #0]

	//set pin A10 as an output pin
	GPIOA->MODER |= (1U<<20);
 80002e4:	4b49      	ldr	r3, [pc, #292]	; (800040c <main+0x234>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a48      	ldr	r2, [pc, #288]	; (800040c <main+0x234>)
 80002ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002ee:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<21);
 80002f0:	4b46      	ldr	r3, [pc, #280]	; (800040c <main+0x234>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a45      	ldr	r2, [pc, #276]	; (800040c <main+0x234>)
 80002f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80002fa:	6013      	str	r3, [r2, #0]

	//set pin A11 as an output pin
	GPIOA->MODER |= (1U<<22);
 80002fc:	4b43      	ldr	r3, [pc, #268]	; (800040c <main+0x234>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a42      	ldr	r2, [pc, #264]	; (800040c <main+0x234>)
 8000302:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000306:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<23);
 8000308:	4b40      	ldr	r3, [pc, #256]	; (800040c <main+0x234>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a3f      	ldr	r2, [pc, #252]	; (800040c <main+0x234>)
 800030e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000312:	6013      	str	r3, [r2, #0]

	//set pin A12 as an output pin
	GPIOA->MODER |= (1U<<24);
 8000314:	4b3d      	ldr	r3, [pc, #244]	; (800040c <main+0x234>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a3c      	ldr	r2, [pc, #240]	; (800040c <main+0x234>)
 800031a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800031e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<25);
 8000320:	4b3a      	ldr	r3, [pc, #232]	; (800040c <main+0x234>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a39      	ldr	r2, [pc, #228]	; (800040c <main+0x234>)
 8000326:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800032a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<30);
	GPIOA->MODER &=~(1U<<31);
*/

	/*Set PINC13 as input pin*/
	GPIOC->MODER &=~(1U<<26);
 800032c:	4b38      	ldr	r3, [pc, #224]	; (8000410 <main+0x238>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a37      	ldr	r2, [pc, #220]	; (8000410 <main+0x238>)
 8000332:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000336:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 8000338:	4b35      	ldr	r3, [pc, #212]	; (8000410 <main+0x238>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a34      	ldr	r2, [pc, #208]	; (8000410 <main+0x238>)
 800033e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000342:	6013      	str	r3, [r2, #0]

	/*Set PINC12 as input pin*/
	GPIOC->MODER &=~(1U<<24);
 8000344:	4b32      	ldr	r3, [pc, #200]	; (8000410 <main+0x238>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a31      	ldr	r2, [pc, #196]	; (8000410 <main+0x238>)
 800034a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800034e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<25);
 8000350:	4b2f      	ldr	r3, [pc, #188]	; (8000410 <main+0x238>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a2e      	ldr	r2, [pc, #184]	; (8000410 <main+0x238>)
 8000356:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800035a:	6013      	str	r3, [r2, #0]

	/*Set PINC11 as input pin*/
	GPIOC->MODER &=~(1U<<22);
 800035c:	4b2c      	ldr	r3, [pc, #176]	; (8000410 <main+0x238>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a2b      	ldr	r2, [pc, #172]	; (8000410 <main+0x238>)
 8000362:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000366:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<23);
 8000368:	4b29      	ldr	r3, [pc, #164]	; (8000410 <main+0x238>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a28      	ldr	r2, [pc, #160]	; (8000410 <main+0x238>)
 800036e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000372:	6013      	str	r3, [r2, #0]

	/*Set PINC10 as input pin*/
	GPIOC->MODER &=~(1U<<20);
 8000374:	4b26      	ldr	r3, [pc, #152]	; (8000410 <main+0x238>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a25      	ldr	r2, [pc, #148]	; (8000410 <main+0x238>)
 800037a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800037e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<21);
 8000380:	4b23      	ldr	r3, [pc, #140]	; (8000410 <main+0x238>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a22      	ldr	r2, [pc, #136]	; (8000410 <main+0x238>)
 8000386:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800038a:	6013      	str	r3, [r2, #0]
	//GPIOC->MODER &=~(1U<<17);


    while(1) {

        if (GPIOC->IDR &  0b0010000000000000) { //0x 2 0 0 0 -> 0x 0010 0000 00000 0000
 800038c:	4b20      	ldr	r3, [pc, #128]	; (8000410 <main+0x238>)
 800038e:	691b      	ldr	r3, [r3, #16]
 8000390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000394:	2b00      	cmp	r3, #0
 8000396:	d002      	beq.n	800039e <main+0x1c6>
            loop_test_porta_clear();
 8000398:	f000 fa3e 	bl	8000818 <loop_test_porta_clear>
 800039c:	e005      	b.n	80003aa <main+0x1d2>
        } else {

        	loop_test_one_porta();
 800039e:	f000 f839 	bl	8000414 <loop_test_one_porta>
        	music_routine_001();
 80003a2:	f000 f9fb 	bl	800079c <music_routine_001>
        	my_delay_longer(); //relax a while to cool the batteries off
 80003a6:	f000 fa5b 	bl	8000860 <my_delay_longer>
        }

        if (GPIOC->IDR &  0b0001000000000000) {
 80003aa:	4b19      	ldr	r3, [pc, #100]	; (8000410 <main+0x238>)
 80003ac:	691b      	ldr	r3, [r3, #16]
 80003ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d002      	beq.n	80003bc <main+0x1e4>
            loop_test_porta_clear();
 80003b6:	f000 fa2f 	bl	8000818 <loop_test_porta_clear>
 80003ba:	e005      	b.n	80003c8 <main+0x1f0>
        } else {
        	loop_test_two_porta();
 80003bc:	f000 f89c 	bl	80004f8 <loop_test_two_porta>
        	music_routine_001();
 80003c0:	f000 f9ec 	bl	800079c <music_routine_001>
        	my_delay_longer(); //relax a while to cool the batteries off
 80003c4:	f000 fa4c 	bl	8000860 <my_delay_longer>
        }

        if (GPIOC->IDR &  0b0000100000000000) {
 80003c8:	4b11      	ldr	r3, [pc, #68]	; (8000410 <main+0x238>)
 80003ca:	691b      	ldr	r3, [r3, #16]
 80003cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d002      	beq.n	80003da <main+0x202>
            loop_test_porta_clear();
 80003d4:	f000 fa20 	bl	8000818 <loop_test_porta_clear>
 80003d8:	e005      	b.n	80003e6 <main+0x20e>
        } else {
        	loop_test_three_porta();
 80003da:	f000 f8fb 	bl	80005d4 <loop_test_three_porta>
        	music_routine_001();
 80003de:	f000 f9dd 	bl	800079c <music_routine_001>
        	my_delay_longer(); //relax a while to cool the batteries off
 80003e2:	f000 fa3d 	bl	8000860 <my_delay_longer>
        }

        if (GPIOC->IDR &  0b0000010000000000) {
 80003e6:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <main+0x238>)
 80003e8:	691b      	ldr	r3, [r3, #16]
 80003ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d002      	beq.n	80003f8 <main+0x220>
            loop_test_porta_clear();
 80003f2:	f000 fa11 	bl	8000818 <loop_test_porta_clear>
 80003f6:	e7c9      	b.n	800038c <main+0x1b4>
        } else {
        	loop_test_four_porta();
 80003f8:	f000 f95e 	bl	80006b8 <loop_test_four_porta>
        	music_routine_001();
 80003fc:	f000 f9ce 	bl	800079c <music_routine_001>
        	my_delay_longer(); //relax a while to cool the batteries off
 8000400:	f000 fa2e 	bl	8000860 <my_delay_longer>
        if (GPIOC->IDR &  0b0010000000000000) { //0x 2 0 0 0 -> 0x 0010 0000 00000 0000
 8000404:	e7c2      	b.n	800038c <main+0x1b4>
 8000406:	bf00      	nop
 8000408:	40023800 	.word	0x40023800
 800040c:	40020000 	.word	0x40020000
 8000410:	40020800 	.word	0x40020800

08000414 <loop_test_one_porta>:
    }

}


void loop_test_one_porta(void) {
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
    my_delay_long();
    loop_test_porta_clear();
*/
    //Drive the linear motor which needs both relays driven from independent power sources.
    //A11
    GPIOA->BSRR = 0b00000000000000000000100000000000;
 8000418:	4b36      	ldr	r3, [pc, #216]	; (80004f4 <loop_test_one_porta+0xe0>)
 800041a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800041e:	619a      	str	r2, [r3, #24]
    //A10
    GPIOA->BSRR = 0b00000000000000000000010000000000;
 8000420:	4b34      	ldr	r3, [pc, #208]	; (80004f4 <loop_test_one_porta+0xe0>)
 8000422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000426:	619a      	str	r2, [r3, #24]
    my_delay_longest();
 8000428:	f000 fa04 	bl	8000834 <my_delay_longest>
    loop_test_porta_clear();
 800042c:	f000 f9f4 	bl	8000818 <loop_test_porta_clear>

	//A12
    GPIOA->BSRR = 0b00000000000000000001000000000000;
 8000430:	4b30      	ldr	r3, [pc, #192]	; (80004f4 <loop_test_one_porta+0xe0>)
 8000432:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000436:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000438:	f000 fa28 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 800043c:	f000 f9ec 	bl	8000818 <loop_test_porta_clear>

	//A11
    GPIOA->BSRR = 0b00000000000000000000100000000000;
 8000440:	4b2c      	ldr	r3, [pc, #176]	; (80004f4 <loop_test_one_porta+0xe0>)
 8000442:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000446:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000448:	f000 fa20 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 800044c:	f000 f9e4 	bl	8000818 <loop_test_porta_clear>

	//A10
    GPIOA->BSRR = 0b00000000000000000000010000000000;
 8000450:	4b28      	ldr	r3, [pc, #160]	; (80004f4 <loop_test_one_porta+0xe0>)
 8000452:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000456:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000458:	f000 fa18 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 800045c:	f000 f9dc 	bl	8000818 <loop_test_porta_clear>

	//A9
    GPIOA->BSRR = 0b00000000000000000000001000000000;
 8000460:	4b24      	ldr	r3, [pc, #144]	; (80004f4 <loop_test_one_porta+0xe0>)
 8000462:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000466:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000468:	f000 fa10 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 800046c:	f000 f9d4 	bl	8000818 <loop_test_porta_clear>

	//A8
    GPIOA->BSRR = 0b00000000000000000000000100000000;
 8000470:	4b20      	ldr	r3, [pc, #128]	; (80004f4 <loop_test_one_porta+0xe0>)
 8000472:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000476:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000478:	f000 fa08 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 800047c:	f000 f9cc 	bl	8000818 <loop_test_porta_clear>

	//A7
    GPIOA->BSRR = 0b00000000000000000000000010000000;
 8000480:	4b1c      	ldr	r3, [pc, #112]	; (80004f4 <loop_test_one_porta+0xe0>)
 8000482:	2280      	movs	r2, #128	; 0x80
 8000484:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000486:	f000 fa01 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 800048a:	f000 f9c5 	bl	8000818 <loop_test_porta_clear>

    //A6
    GPIOA->BSRR = 0b00000000000000000000000001000000;
 800048e:	4b19      	ldr	r3, [pc, #100]	; (80004f4 <loop_test_one_porta+0xe0>)
 8000490:	2240      	movs	r2, #64	; 0x40
 8000492:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000494:	f000 f9fa 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 8000498:	f000 f9be 	bl	8000818 <loop_test_porta_clear>

    //A5
    GPIOA->BSRR = 0b00000000000000000000000000100000;
 800049c:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <loop_test_one_porta+0xe0>)
 800049e:	2220      	movs	r2, #32
 80004a0:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80004a2:	f000 f9f3 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 80004a6:	f000 f9b7 	bl	8000818 <loop_test_porta_clear>

    //A4
    GPIOA->BSRR = 0b00000000000000000000000000010000;
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <loop_test_one_porta+0xe0>)
 80004ac:	2210      	movs	r2, #16
 80004ae:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80004b0:	f000 f9ec 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 80004b4:	f000 f9b0 	bl	8000818 <loop_test_porta_clear>

    //A3
    GPIOA->BSRR = 0b00000000000000000000000000001000;
 80004b8:	4b0e      	ldr	r3, [pc, #56]	; (80004f4 <loop_test_one_porta+0xe0>)
 80004ba:	2208      	movs	r2, #8
 80004bc:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80004be:	f000 f9e5 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 80004c2:	f000 f9a9 	bl	8000818 <loop_test_porta_clear>

    //A2
    GPIOA->BSRR = 0b00000000000000000000000000000100;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	; (80004f4 <loop_test_one_porta+0xe0>)
 80004c8:	2204      	movs	r2, #4
 80004ca:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80004cc:	f000 f9de 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 80004d0:	f000 f9a2 	bl	8000818 <loop_test_porta_clear>

    //A1
    GPIOA->BSRR = 0b00000000000000000000000000000010;
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <loop_test_one_porta+0xe0>)
 80004d6:	2202      	movs	r2, #2
 80004d8:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80004da:	f000 f9d7 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 80004de:	f000 f99b 	bl	8000818 <loop_test_porta_clear>

    //A0
    GPIOA->BSRR = 0b00000000000000000000000000000001;
 80004e2:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <loop_test_one_porta+0xe0>)
 80004e4:	2201      	movs	r2, #1
 80004e6:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80004e8:	f000 f9d0 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 80004ec:	f000 f994 	bl	8000818 <loop_test_porta_clear>

}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	40020000 	.word	0x40020000

080004f8 <loop_test_two_porta>:

void loop_test_two_porta(void) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0

    //Drive the linear motor which needs both relays driven from independent power sources.
    //A11
    GPIOA->BSRR = 0b00000000000000000000100000000000;
 80004fc:	4b34      	ldr	r3, [pc, #208]	; (80005d0 <loop_test_two_porta+0xd8>)
 80004fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000502:	619a      	str	r2, [r3, #24]
    //A10
    GPIOA->BSRR = 0b00000000000000000000010000000000;
 8000504:	4b32      	ldr	r3, [pc, #200]	; (80005d0 <loop_test_two_porta+0xd8>)
 8000506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800050a:	619a      	str	r2, [r3, #24]
    my_delay_longest();
 800050c:	f000 f992 	bl	8000834 <my_delay_longest>
    loop_test_porta_clear();
 8000510:	f000 f982 	bl	8000818 <loop_test_porta_clear>

	//A10
    GPIOA->BSRR = 0b00000000000000000000010000000000;
 8000514:	4b2e      	ldr	r3, [pc, #184]	; (80005d0 <loop_test_two_porta+0xd8>)
 8000516:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800051a:	619a      	str	r2, [r3, #24]
    my_delay_long();
 800051c:	f000 f9b6 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 8000520:	f000 f97a 	bl	8000818 <loop_test_porta_clear>

	//A9
    GPIOA->BSRR = 0b00000000000000000000001000000000;
 8000524:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <loop_test_two_porta+0xd8>)
 8000526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800052a:	619a      	str	r2, [r3, #24]
    my_delay_long();
 800052c:	f000 f9ae 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 8000530:	f000 f972 	bl	8000818 <loop_test_porta_clear>

	//A7
    GPIOA->BSRR = 0b00000000000000000000000010000000;
 8000534:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <loop_test_two_porta+0xd8>)
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	619a      	str	r2, [r3, #24]
    my_delay_long();
 800053a:	f000 f9a7 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 800053e:	f000 f96b 	bl	8000818 <loop_test_porta_clear>


	//A11
    GPIOA->BSRR = 0b00000000000000000000100000000000;
 8000542:	4b23      	ldr	r3, [pc, #140]	; (80005d0 <loop_test_two_porta+0xd8>)
 8000544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000548:	619a      	str	r2, [r3, #24]
    my_delay_long();
 800054a:	f000 f99f 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 800054e:	f000 f963 	bl	8000818 <loop_test_porta_clear>

   //A5
    GPIOA->BSRR = 0b00000000000000000000000000100000;
 8000552:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <loop_test_two_porta+0xd8>)
 8000554:	2220      	movs	r2, #32
 8000556:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000558:	f000 f998 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 800055c:	f000 f95c 	bl	8000818 <loop_test_porta_clear>

    //A3
    GPIOA->BSRR = 0b00000000000000000000000000001000;
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <loop_test_two_porta+0xd8>)
 8000562:	2208      	movs	r2, #8
 8000564:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000566:	f000 f991 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 800056a:	f000 f955 	bl	8000818 <loop_test_porta_clear>

	//A12
    GPIOA->BSRR = 0b00000000000000000001000000000000;
 800056e:	4b18      	ldr	r3, [pc, #96]	; (80005d0 <loop_test_two_porta+0xd8>)
 8000570:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000574:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000576:	f000 f989 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 800057a:	f000 f94d 	bl	8000818 <loop_test_porta_clear>

    //A2
    GPIOA->BSRR = 0b00000000000000000000000000000100;
 800057e:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <loop_test_two_porta+0xd8>)
 8000580:	2204      	movs	r2, #4
 8000582:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000584:	f000 f982 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 8000588:	f000 f946 	bl	8000818 <loop_test_porta_clear>

    //A4
    GPIOA->BSRR = 0b00000000000000000000000000010000;
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <loop_test_two_porta+0xd8>)
 800058e:	2210      	movs	r2, #16
 8000590:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000592:	f000 f97b 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 8000596:	f000 f93f 	bl	8000818 <loop_test_porta_clear>

    //A0
    GPIOA->BSRR = 0b00000000000000000000000000000001;
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <loop_test_two_porta+0xd8>)
 800059c:	2201      	movs	r2, #1
 800059e:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80005a0:	f000 f974 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 80005a4:	f000 f938 	bl	8000818 <loop_test_porta_clear>

    //A1
    GPIOA->BSRR = 0b00000000000000000000000000000010;
 80005a8:	4b09      	ldr	r3, [pc, #36]	; (80005d0 <loop_test_two_porta+0xd8>)
 80005aa:	2202      	movs	r2, #2
 80005ac:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80005ae:	f000 f96d 	bl	800088c <my_delay_long>
    loop_test_porta_clear();
 80005b2:	f000 f931 	bl	8000818 <loop_test_porta_clear>


    //Drive the stepper motor which needs both relays driven from independent power sources.
    //A6
    GPIOA->BSRR = 0b00000000000000000000000001000000;
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <loop_test_two_porta+0xd8>)
 80005b8:	2240      	movs	r2, #64	; 0x40
 80005ba:	619a      	str	r2, [r3, #24]
    //A8
    GPIOA->BSRR = 0b00000000000000000000000100000000;
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <loop_test_two_porta+0xd8>)
 80005be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005c2:	619a      	str	r2, [r3, #24]
    my_delay_longer();
 80005c4:	f000 f94c 	bl	8000860 <my_delay_longer>
    loop_test_porta_clear();
 80005c8:	f000 f926 	bl	8000818 <loop_test_porta_clear>


}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40020000 	.word	0x40020000

080005d4 <loop_test_three_porta>:


void loop_test_three_porta(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

    //Drive the linear motor which needs both relays driven from independent power sources.
    //A11
    GPIOA->BSRR = 0b00000000000000000000100000000000;
 80005d8:	4b36      	ldr	r3, [pc, #216]	; (80006b4 <loop_test_three_porta+0xe0>)
 80005da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005de:	619a      	str	r2, [r3, #24]
    //A10
    GPIOA->BSRR = 0b00000000000000000000010000000000;
 80005e0:	4b34      	ldr	r3, [pc, #208]	; (80006b4 <loop_test_three_porta+0xe0>)
 80005e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005e6:	619a      	str	r2, [r3, #24]
    my_delay_longest();
 80005e8:	f000 f924 	bl	8000834 <my_delay_longest>
    loop_test_porta_clear();
 80005ec:	f000 f914 	bl	8000818 <loop_test_porta_clear>

	//A10
    GPIOA->BSRR = 0b00000000000000000000010000000000;
 80005f0:	4b30      	ldr	r3, [pc, #192]	; (80006b4 <loop_test_three_porta+0xe0>)
 80005f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005f6:	619a      	str	r2, [r3, #24]
    my_delay_short();
 80005f8:	f000 f974 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 80005fc:	f000 f90c 	bl	8000818 <loop_test_porta_clear>

	//A9
    GPIOA->BSRR = 0b00000000000000000000001000000000;
 8000600:	4b2c      	ldr	r3, [pc, #176]	; (80006b4 <loop_test_three_porta+0xe0>)
 8000602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000606:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000608:	f000 f96c 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 800060c:	f000 f904 	bl	8000818 <loop_test_porta_clear>

	//A7
    GPIOA->BSRR = 0b00000000000000000000000010000000;
 8000610:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <loop_test_three_porta+0xe0>)
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000616:	f000 f965 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 800061a:	f000 f8fd 	bl	8000818 <loop_test_porta_clear>

    //A6
    GPIOA->BSRR = 0b00000000000000000000000001000000;
 800061e:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <loop_test_three_porta+0xe0>)
 8000620:	2240      	movs	r2, #64	; 0x40
 8000622:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000624:	f000 f95e 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 8000628:	f000 f8f6 	bl	8000818 <loop_test_porta_clear>

	//A8
    GPIOA->BSRR = 0b00000000000000000000000100000000;
 800062c:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <loop_test_three_porta+0xe0>)
 800062e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000632:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000634:	f000 f956 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 8000638:	f000 f8ee 	bl	8000818 <loop_test_porta_clear>

	//A11
    GPIOA->BSRR = 0b00000000000000000000100000000000;
 800063c:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <loop_test_three_porta+0xe0>)
 800063e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000642:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000644:	f000 f94e 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 8000648:	f000 f8e6 	bl	8000818 <loop_test_porta_clear>

   //A5
    GPIOA->BSRR = 0b00000000000000000000000000100000;
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <loop_test_three_porta+0xe0>)
 800064e:	2220      	movs	r2, #32
 8000650:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000652:	f000 f947 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 8000656:	f000 f8df 	bl	8000818 <loop_test_porta_clear>

    //A3
    GPIOA->BSRR = 0b00000000000000000000000000001000;
 800065a:	4b16      	ldr	r3, [pc, #88]	; (80006b4 <loop_test_three_porta+0xe0>)
 800065c:	2208      	movs	r2, #8
 800065e:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000660:	f000 f940 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 8000664:	f000 f8d8 	bl	8000818 <loop_test_porta_clear>

	//A12
    GPIOA->BSRR = 0b00000000000000000001000000000000;
 8000668:	4b12      	ldr	r3, [pc, #72]	; (80006b4 <loop_test_three_porta+0xe0>)
 800066a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800066e:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000670:	f000 f938 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 8000674:	f000 f8d0 	bl	8000818 <loop_test_porta_clear>

    //A2
    GPIOA->BSRR = 0b00000000000000000000000000000100;
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <loop_test_three_porta+0xe0>)
 800067a:	2204      	movs	r2, #4
 800067c:	619a      	str	r2, [r3, #24]
    my_delay_short();
 800067e:	f000 f931 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 8000682:	f000 f8c9 	bl	8000818 <loop_test_porta_clear>

    //A4
    GPIOA->BSRR = 0b00000000000000000000000000010000;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <loop_test_three_porta+0xe0>)
 8000688:	2210      	movs	r2, #16
 800068a:	619a      	str	r2, [r3, #24]
    my_delay_short();
 800068c:	f000 f92a 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 8000690:	f000 f8c2 	bl	8000818 <loop_test_porta_clear>

    //A0
    GPIOA->BSRR = 0b00000000000000000000000000000001;
 8000694:	4b07      	ldr	r3, [pc, #28]	; (80006b4 <loop_test_three_porta+0xe0>)
 8000696:	2201      	movs	r2, #1
 8000698:	619a      	str	r2, [r3, #24]
    my_delay_short();
 800069a:	f000 f923 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 800069e:	f000 f8bb 	bl	8000818 <loop_test_porta_clear>

    //A1
    GPIOA->BSRR = 0b00000000000000000000000000000010;
 80006a2:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <loop_test_three_porta+0xe0>)
 80006a4:	2202      	movs	r2, #2
 80006a6:	619a      	str	r2, [r3, #24]
    my_delay_short();
 80006a8:	f000 f91c 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 80006ac:	f000 f8b4 	bl	8000818 <loop_test_porta_clear>


}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40020000 	.word	0x40020000

080006b8 <loop_test_four_porta>:


void loop_test_four_porta(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0

    //Drive the linear motor which needs both relays driven from independent power sources.
    //A11
    GPIOA->BSRR = 0b00000000000000000000100000000000;
 80006bc:	4b36      	ldr	r3, [pc, #216]	; (8000798 <loop_test_four_porta+0xe0>)
 80006be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006c2:	619a      	str	r2, [r3, #24]
    //A10
    GPIOA->BSRR = 0b00000000000000000000010000000000;
 80006c4:	4b34      	ldr	r3, [pc, #208]	; (8000798 <loop_test_four_porta+0xe0>)
 80006c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ca:	619a      	str	r2, [r3, #24]
    my_delay_longest();
 80006cc:	f000 f8b2 	bl	8000834 <my_delay_longest>
    loop_test_porta_clear();
 80006d0:	f000 f8a2 	bl	8000818 <loop_test_porta_clear>


    //A3
    GPIOA->BSRR = 0b00000000000000000000000000001000;
 80006d4:	4b30      	ldr	r3, [pc, #192]	; (8000798 <loop_test_four_porta+0xe0>)
 80006d6:	2208      	movs	r2, #8
 80006d8:	619a      	str	r2, [r3, #24]
    my_delay_short();
 80006da:	f000 f903 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 80006de:	f000 f89b 	bl	8000818 <loop_test_porta_clear>

	//A7
    GPIOA->BSRR = 0b00000000000000000000000010000000;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <loop_test_four_porta+0xe0>)
 80006e4:	2280      	movs	r2, #128	; 0x80
 80006e6:	619a      	str	r2, [r3, #24]
    my_delay_short();
 80006e8:	f000 f8fc 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 80006ec:	f000 f894 	bl	8000818 <loop_test_porta_clear>

    //A6
    GPIOA->BSRR = 0b00000000000000000000000001000000;
 80006f0:	4b29      	ldr	r3, [pc, #164]	; (8000798 <loop_test_four_porta+0xe0>)
 80006f2:	2240      	movs	r2, #64	; 0x40
 80006f4:	619a      	str	r2, [r3, #24]
    my_delay_short();
 80006f6:	f000 f8f5 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 80006fa:	f000 f88d 	bl	8000818 <loop_test_porta_clear>

	//A8
    GPIOA->BSRR = 0b00000000000000000000000100000000;
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <loop_test_four_porta+0xe0>)
 8000700:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000704:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000706:	f000 f8ed 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 800070a:	f000 f885 	bl	8000818 <loop_test_porta_clear>

	//A9
    GPIOA->BSRR = 0b00000000000000000000001000000000;
 800070e:	4b22      	ldr	r3, [pc, #136]	; (8000798 <loop_test_four_porta+0xe0>)
 8000710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000714:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000716:	f000 f8e5 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 800071a:	f000 f87d 	bl	8000818 <loop_test_porta_clear>

	//A11
    GPIOA->BSRR = 0b00000000000000000000100000000000;
 800071e:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <loop_test_four_porta+0xe0>)
 8000720:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000724:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000726:	f000 f8dd 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 800072a:	f000 f875 	bl	8000818 <loop_test_porta_clear>

	//A10
    GPIOA->BSRR = 0b00000000000000000000010000000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <loop_test_four_porta+0xe0>)
 8000730:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000734:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000736:	f000 f8d5 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 800073a:	f000 f86d 	bl	8000818 <loop_test_porta_clear>

    //A0
    GPIOA->BSRR = 0b00000000000000000000000000000001;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <loop_test_four_porta+0xe0>)
 8000740:	2201      	movs	r2, #1
 8000742:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000744:	f000 f8ce 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 8000748:	f000 f866 	bl	8000818 <loop_test_porta_clear>

	//A12
    GPIOA->BSRR = 0b00000000000000000001000000000000;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <loop_test_four_porta+0xe0>)
 800074e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000752:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000754:	f000 f8c6 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 8000758:	f000 f85e 	bl	8000818 <loop_test_porta_clear>

    //A2
    GPIOA->BSRR = 0b00000000000000000000000000000100;
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <loop_test_four_porta+0xe0>)
 800075e:	2204      	movs	r2, #4
 8000760:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000762:	f000 f8bf 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 8000766:	f000 f857 	bl	8000818 <loop_test_porta_clear>

    //A4
    GPIOA->BSRR = 0b00000000000000000000000000010000;
 800076a:	4b0b      	ldr	r3, [pc, #44]	; (8000798 <loop_test_four_porta+0xe0>)
 800076c:	2210      	movs	r2, #16
 800076e:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000770:	f000 f8b8 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 8000774:	f000 f850 	bl	8000818 <loop_test_porta_clear>

    //A1
    GPIOA->BSRR = 0b00000000000000000000000000000010;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <loop_test_four_porta+0xe0>)
 800077a:	2202      	movs	r2, #2
 800077c:	619a      	str	r2, [r3, #24]
    my_delay_short();
 800077e:	f000 f8b1 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 8000782:	f000 f849 	bl	8000818 <loop_test_porta_clear>

    //A5
    GPIOA->BSRR = 0b00000000000000000000000000100000;
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <loop_test_four_porta+0xe0>)
 8000788:	2220      	movs	r2, #32
 800078a:	619a      	str	r2, [r3, #24]
    my_delay_short();
 800078c:	f000 f8aa 	bl	80008e4 <my_delay_short>
    loop_test_porta_clear();
 8000790:	f000 f842 	bl	8000818 <loop_test_porta_clear>



}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40020000 	.word	0x40020000

0800079c <music_routine_001>:

void music_routine_001(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
    //A0
    //GPIOA->BSRR = 0b00000000000000000000000000000001;
    //A6
	for (int i=0;i<10;i++) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	e02d      	b.n	8000804 <music_routine_001+0x68>
		GPIOA->BSRR = 0b00000000000000000000000000100000;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <music_routine_001+0x78>)
 80007aa:	2220      	movs	r2, #32
 80007ac:	619a      	str	r2, [r3, #24]
		my_delay_short();
 80007ae:	f000 f899 	bl	80008e4 <my_delay_short>
		loop_test_porta_clear();
 80007b2:	f000 f831 	bl	8000818 <loop_test_porta_clear>

		GPIOA->BSRR = 0b00000000000000000000000000100000;
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <music_routine_001+0x78>)
 80007b8:	2220      	movs	r2, #32
 80007ba:	619a      	str	r2, [r3, #24]
		my_delay_shorter();
 80007bc:	f000 f8a8 	bl	8000910 <my_delay_shorter>
		loop_test_porta_clear();
 80007c0:	f000 f82a 	bl	8000818 <loop_test_porta_clear>
		my_delay_shorter();
 80007c4:	f000 f8a4 	bl	8000910 <my_delay_shorter>

		GPIOA->BSRR = 0b00000000000000000000000000100000;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <music_routine_001+0x78>)
 80007ca:	2220      	movs	r2, #32
 80007cc:	619a      	str	r2, [r3, #24]
		my_delay_medium();
 80007ce:	f000 f873 	bl	80008b8 <my_delay_medium>
		loop_test_porta_clear();
 80007d2:	f000 f821 	bl	8000818 <loop_test_porta_clear>
		my_delay_short();
 80007d6:	f000 f885 	bl	80008e4 <my_delay_short>
		for (int i=0;i<10;i++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	603b      	str	r3, [r7, #0]
 80007de:	e00b      	b.n	80007f8 <music_routine_001+0x5c>
			GPIOA->BSRR = 0b00000000000000000000000000100000;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <music_routine_001+0x78>)
 80007e2:	2220      	movs	r2, #32
 80007e4:	619a      	str	r2, [r3, #24]
			my_delay_shorter();
 80007e6:	f000 f893 	bl	8000910 <my_delay_shorter>
			loop_test_porta_clear();
 80007ea:	f000 f815 	bl	8000818 <loop_test_porta_clear>
			my_delay_shortest();
 80007ee:	f000 f8a4 	bl	800093a <my_delay_shortest>
		for (int i=0;i<10;i++) {
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	3301      	adds	r3, #1
 80007f6:	603b      	str	r3, [r7, #0]
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	2b09      	cmp	r3, #9
 80007fc:	ddf0      	ble.n	80007e0 <music_routine_001+0x44>
	for (int i=0;i<10;i++) {
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	3301      	adds	r3, #1
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b09      	cmp	r3, #9
 8000808:	ddce      	ble.n	80007a8 <music_routine_001+0xc>
		}
	}

}
 800080a:	bf00      	nop
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40020000 	.word	0x40020000

08000818 <loop_test_porta_clear>:
    GPIOA->BSRR = 0b00000000000000000000000000000001;
    my_delay_short();
    loop_test_porta_clear();
}

void loop_test_porta_clear(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	GPIOA->BSRR = 0b00011111111111110000000000000000;
 800081c:	4b03      	ldr	r3, [pc, #12]	; (800082c <loop_test_porta_clear+0x14>)
 800081e:	4a04      	ldr	r2, [pc, #16]	; (8000830 <loop_test_porta_clear+0x18>)
 8000820:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000822:	f000 f85f 	bl	80008e4 <my_delay_short>
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40020000 	.word	0x40020000
 8000830:	1fff0000 	.word	0x1fff0000

08000834 <my_delay_longest>:

void my_delay_longest(void) {
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
    for(int i=0;i<100000000;i++){
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	e002      	b.n	8000846 <my_delay_longest+0x12>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3301      	adds	r3, #1
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	4a04      	ldr	r2, [pc, #16]	; (800085c <my_delay_longest+0x28>)
 800084a:	4293      	cmp	r3, r2
 800084c:	ddf8      	ble.n	8000840 <my_delay_longest+0xc>
		//do nothing
	}
}
 800084e:	bf00      	nop
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr
 800085c:	05f5e0ff 	.word	0x05f5e0ff

08000860 <my_delay_longer>:

void my_delay_longer(void) {
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
    for(int i=0;i<50000000;i++){
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	e002      	b.n	8000872 <my_delay_longer+0x12>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3301      	adds	r3, #1
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <my_delay_longer+0x28>)
 8000876:	4293      	cmp	r3, r2
 8000878:	ddf8      	ble.n	800086c <my_delay_longer+0xc>
		//do nothing
	}
}
 800087a:	bf00      	nop
 800087c:	bf00      	nop
 800087e:	370c      	adds	r7, #12
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr
 8000888:	02faf07f 	.word	0x02faf07f

0800088c <my_delay_long>:

void my_delay_long(void) {
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
    for(int i=0;i<1000000;i++){
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	e002      	b.n	800089e <my_delay_long+0x12>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	3301      	adds	r3, #1
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <my_delay_long+0x28>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	ddf8      	ble.n	8000898 <my_delay_long+0xc>
		//do nothing
	}
}
 80008a6:	bf00      	nop
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	000f423f 	.word	0x000f423f

080008b8 <my_delay_medium>:

void my_delay_medium(void) {
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
    for(int i=0;i<500000;i++){
 80008be:	2300      	movs	r3, #0
 80008c0:	607b      	str	r3, [r7, #4]
 80008c2:	e002      	b.n	80008ca <my_delay_medium+0x12>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3301      	adds	r3, #1
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <my_delay_medium+0x28>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	ddf8      	ble.n	80008c4 <my_delay_medium+0xc>
		//do nothing
	}
}
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	0007a11f 	.word	0x0007a11f

080008e4 <my_delay_short>:

void my_delay_short(void) {
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
    for(int i=0;i<100000;i++){
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	e002      	b.n	80008f6 <my_delay_short+0x12>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3301      	adds	r3, #1
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <my_delay_short+0x28>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	ddf8      	ble.n	80008f0 <my_delay_short+0xc>
		//do nothing
	}
}
 80008fe:	bf00      	nop
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	0001869f 	.word	0x0001869f

08000910 <my_delay_shorter>:

void my_delay_shorter(void) {
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
    for(int i=0;i<10000;i++){
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	e002      	b.n	8000922 <my_delay_shorter+0x12>
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3301      	adds	r3, #1
 8000920:	607b      	str	r3, [r7, #4]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	f242 720f 	movw	r2, #9999	; 0x270f
 8000928:	4293      	cmp	r3, r2
 800092a:	ddf7      	ble.n	800091c <my_delay_shorter+0xc>
		//do nothing
	}
}
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <my_delay_shortest>:

void my_delay_shortest(void) {
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
    for(int i=0;i<1000;i++){
 8000940:	2300      	movs	r3, #0
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	e002      	b.n	800094c <my_delay_shortest+0x12>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3301      	adds	r3, #1
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000952:	dbf8      	blt.n	8000946 <my_delay_shortest+0xc>
		//do nothing
	}
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
	...

08000964 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000966:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000968:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800096e:	490d      	ldr	r1, [pc, #52]	; (80009a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <LoopForever+0xe>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000974:	e002      	b.n	800097c <LoopCopyDataInit>

08000976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097a:	3304      	adds	r3, #4

0800097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000980:	d3f9      	bcc.n	8000976 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000984:	4c0a      	ldr	r4, [pc, #40]	; (80009b0 <LoopForever+0x16>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000988:	e001      	b.n	800098e <LoopFillZerobss>

0800098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800098c:	3204      	adds	r2, #4

0800098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000990:	d3fb      	bcc.n	800098a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000992:	f000 f811 	bl	80009b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000996:	f7ff fc1f 	bl	80001d8 <main>

0800099a <LoopForever>:

LoopForever:
  b LoopForever
 800099a:	e7fe      	b.n	800099a <LoopForever>
  ldr   r0, =_estack
 800099c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80009a8:	08000a20 	.word	0x08000a20
  ldr r2, =_sbss
 80009ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80009b0:	2000001c 	.word	0x2000001c

080009b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC_IRQHandler>
	...

080009b8 <__libc_init_array>:
 80009b8:	b570      	push	{r4, r5, r6, lr}
 80009ba:	4d0d      	ldr	r5, [pc, #52]	; (80009f0 <__libc_init_array+0x38>)
 80009bc:	4c0d      	ldr	r4, [pc, #52]	; (80009f4 <__libc_init_array+0x3c>)
 80009be:	1b64      	subs	r4, r4, r5
 80009c0:	10a4      	asrs	r4, r4, #2
 80009c2:	2600      	movs	r6, #0
 80009c4:	42a6      	cmp	r6, r4
 80009c6:	d109      	bne.n	80009dc <__libc_init_array+0x24>
 80009c8:	4d0b      	ldr	r5, [pc, #44]	; (80009f8 <__libc_init_array+0x40>)
 80009ca:	4c0c      	ldr	r4, [pc, #48]	; (80009fc <__libc_init_array+0x44>)
 80009cc:	f000 f818 	bl	8000a00 <_init>
 80009d0:	1b64      	subs	r4, r4, r5
 80009d2:	10a4      	asrs	r4, r4, #2
 80009d4:	2600      	movs	r6, #0
 80009d6:	42a6      	cmp	r6, r4
 80009d8:	d105      	bne.n	80009e6 <__libc_init_array+0x2e>
 80009da:	bd70      	pop	{r4, r5, r6, pc}
 80009dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80009e0:	4798      	blx	r3
 80009e2:	3601      	adds	r6, #1
 80009e4:	e7ee      	b.n	80009c4 <__libc_init_array+0xc>
 80009e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ea:	4798      	blx	r3
 80009ec:	3601      	adds	r6, #1
 80009ee:	e7f2      	b.n	80009d6 <__libc_init_array+0x1e>
 80009f0:	08000a18 	.word	0x08000a18
 80009f4:	08000a18 	.word	0x08000a18
 80009f8:	08000a18 	.word	0x08000a18
 80009fc:	08000a1c 	.word	0x08000a1c

08000a00 <_init>:
 8000a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a02:	bf00      	nop
 8000a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a06:	bc08      	pop	{r3}
 8000a08:	469e      	mov	lr, r3
 8000a0a:	4770      	bx	lr

08000a0c <_fini>:
 8000a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a0e:	bf00      	nop
 8000a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a12:	bc08      	pop	{r3}
 8000a14:	469e      	mov	lr, r3
 8000a16:	4770      	bx	lr
