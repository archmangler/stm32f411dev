
pushbutton_gpio_input_bsrr_working.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006b4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800084c  08000854  00010854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800084c  0800084c  00010854  2**0
                  CONTENTS
  4 .ARM          00000000  0800084c  0800084c  00010854  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800084c  08000854  00010854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800084c  0800084c  0001084c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000850  08000850  00010850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010854  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000854  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000854  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010854  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010884  2**0
                  CONTENTS, READONLY
 13 .debug_info   000003ba  00000000  00000000  000108c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000138  00000000  00000000  00010c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000080  00000000  00000000  00010dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000005b  00000000  00000000  00010e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000dbb0  00000000  00000000  00010e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000086b  00000000  00000000  0001ea4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0004f6b5  00000000  00000000  0001f2b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000134  00000000  00000000  0006e96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0006eaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000834 	.word	0x08000834

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000834 	.word	0x08000834

080001d8 <main>:
void loop_test_four_porta(void);

void loop_test_porta_clear(void);

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b82      	ldr	r3, [pc, #520]	; (80003e8 <main+0x210>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a81      	ldr	r2, [pc, #516]	; (80003e8 <main+0x210>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= GPIOCEN;
 80001e8:	4b7f      	ldr	r3, [pc, #508]	; (80003e8 <main+0x210>)
 80001ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001ec:	4a7e      	ldr	r2, [pc, #504]	; (80003e8 <main+0x210>)
 80001ee:	f043 0304 	orr.w	r3, r3, #4
 80001f2:	6313      	str	r3, [r2, #48]	; 0x30

	/*set pin A0 as an output pin*/
	GPIOA->MODER |= (1U<<0);
 80001f4:	4b7d      	ldr	r3, [pc, #500]	; (80003ec <main+0x214>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a7c      	ldr	r2, [pc, #496]	; (80003ec <main+0x214>)
 80001fa:	f043 0301 	orr.w	r3, r3, #1
 80001fe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<1);
 8000200:	4b7a      	ldr	r3, [pc, #488]	; (80003ec <main+0x214>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a79      	ldr	r2, [pc, #484]	; (80003ec <main+0x214>)
 8000206:	f023 0302 	bic.w	r3, r3, #2
 800020a:	6013      	str	r3, [r2, #0]

	/*set pin A1 as an output pin*/
	GPIOA->MODER |= (1U<<2);
 800020c:	4b77      	ldr	r3, [pc, #476]	; (80003ec <main+0x214>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a76      	ldr	r2, [pc, #472]	; (80003ec <main+0x214>)
 8000212:	f043 0304 	orr.w	r3, r3, #4
 8000216:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<3);
 8000218:	4b74      	ldr	r3, [pc, #464]	; (80003ec <main+0x214>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a73      	ldr	r2, [pc, #460]	; (80003ec <main+0x214>)
 800021e:	f023 0308 	bic.w	r3, r3, #8
 8000222:	6013      	str	r3, [r2, #0]

	/*set pin A2 as an output pin*/
	GPIOA->MODER |= (1U<<4);
 8000224:	4b71      	ldr	r3, [pc, #452]	; (80003ec <main+0x214>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4a70      	ldr	r2, [pc, #448]	; (80003ec <main+0x214>)
 800022a:	f043 0310 	orr.w	r3, r3, #16
 800022e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<5);
 8000230:	4b6e      	ldr	r3, [pc, #440]	; (80003ec <main+0x214>)
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a6d      	ldr	r2, [pc, #436]	; (80003ec <main+0x214>)
 8000236:	f023 0320 	bic.w	r3, r3, #32
 800023a:	6013      	str	r3, [r2, #0]

	/*set pin A3 as an output pin*/
	GPIOA->MODER |= (1U<<6);
 800023c:	4b6b      	ldr	r3, [pc, #428]	; (80003ec <main+0x214>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a6a      	ldr	r2, [pc, #424]	; (80003ec <main+0x214>)
 8000242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000246:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<7);
 8000248:	4b68      	ldr	r3, [pc, #416]	; (80003ec <main+0x214>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a67      	ldr	r2, [pc, #412]	; (80003ec <main+0x214>)
 800024e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000252:	6013      	str	r3, [r2, #0]

	/*set pin A4 as an output pin*/
	GPIOA->MODER |= (1U<<8);
 8000254:	4b65      	ldr	r3, [pc, #404]	; (80003ec <main+0x214>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a64      	ldr	r2, [pc, #400]	; (80003ec <main+0x214>)
 800025a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800025e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<9);
 8000260:	4b62      	ldr	r3, [pc, #392]	; (80003ec <main+0x214>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a61      	ldr	r2, [pc, #388]	; (80003ec <main+0x214>)
 8000266:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800026a:	6013      	str	r3, [r2, #0]

	//set pin A5 as an output pin
	GPIOA->MODER |= (1U<<10);
 800026c:	4b5f      	ldr	r3, [pc, #380]	; (80003ec <main+0x214>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a5e      	ldr	r2, [pc, #376]	; (80003ec <main+0x214>)
 8000272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000276:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 8000278:	4b5c      	ldr	r3, [pc, #368]	; (80003ec <main+0x214>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a5b      	ldr	r2, [pc, #364]	; (80003ec <main+0x214>)
 800027e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000282:	6013      	str	r3, [r2, #0]

	//set pin A6 as an output pin
	GPIOA->MODER |= (1U<<12);
 8000284:	4b59      	ldr	r3, [pc, #356]	; (80003ec <main+0x214>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a58      	ldr	r2, [pc, #352]	; (80003ec <main+0x214>)
 800028a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800028e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<13);
 8000290:	4b56      	ldr	r3, [pc, #344]	; (80003ec <main+0x214>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a55      	ldr	r2, [pc, #340]	; (80003ec <main+0x214>)
 8000296:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800029a:	6013      	str	r3, [r2, #0]

	//set pin A7 as an output pin
	GPIOA->MODER |= (1U<<14);
 800029c:	4b53      	ldr	r3, [pc, #332]	; (80003ec <main+0x214>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a52      	ldr	r2, [pc, #328]	; (80003ec <main+0x214>)
 80002a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002a6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<15);
 80002a8:	4b50      	ldr	r3, [pc, #320]	; (80003ec <main+0x214>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a4f      	ldr	r2, [pc, #316]	; (80003ec <main+0x214>)
 80002ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80002b2:	6013      	str	r3, [r2, #0]

	//set pin A8 as an output pin
	GPIOA->MODER |= (1U<<16);
 80002b4:	4b4d      	ldr	r3, [pc, #308]	; (80003ec <main+0x214>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a4c      	ldr	r2, [pc, #304]	; (80003ec <main+0x214>)
 80002ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002be:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<17);
 80002c0:	4b4a      	ldr	r3, [pc, #296]	; (80003ec <main+0x214>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a49      	ldr	r2, [pc, #292]	; (80003ec <main+0x214>)
 80002c6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80002ca:	6013      	str	r3, [r2, #0]

	//set pin A9 as an output pin
	GPIOA->MODER |= (1U<<18);
 80002cc:	4b47      	ldr	r3, [pc, #284]	; (80003ec <main+0x214>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a46      	ldr	r2, [pc, #280]	; (80003ec <main+0x214>)
 80002d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002d6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<19);
 80002d8:	4b44      	ldr	r3, [pc, #272]	; (80003ec <main+0x214>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a43      	ldr	r2, [pc, #268]	; (80003ec <main+0x214>)
 80002de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80002e2:	6013      	str	r3, [r2, #0]

	//set pin A10 as an output pin
	GPIOA->MODER |= (1U<<20);
 80002e4:	4b41      	ldr	r3, [pc, #260]	; (80003ec <main+0x214>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a40      	ldr	r2, [pc, #256]	; (80003ec <main+0x214>)
 80002ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002ee:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<21);
 80002f0:	4b3e      	ldr	r3, [pc, #248]	; (80003ec <main+0x214>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a3d      	ldr	r2, [pc, #244]	; (80003ec <main+0x214>)
 80002f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80002fa:	6013      	str	r3, [r2, #0]

	//set pin A11 as an output pin
	GPIOA->MODER |= (1U<<22);
 80002fc:	4b3b      	ldr	r3, [pc, #236]	; (80003ec <main+0x214>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a3a      	ldr	r2, [pc, #232]	; (80003ec <main+0x214>)
 8000302:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000306:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<23);
 8000308:	4b38      	ldr	r3, [pc, #224]	; (80003ec <main+0x214>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a37      	ldr	r2, [pc, #220]	; (80003ec <main+0x214>)
 800030e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000312:	6013      	str	r3, [r2, #0]

	//set pin A12 as an output pin
	GPIOA->MODER |= (1U<<24);
 8000314:	4b35      	ldr	r3, [pc, #212]	; (80003ec <main+0x214>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a34      	ldr	r2, [pc, #208]	; (80003ec <main+0x214>)
 800031a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800031e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<25);
 8000320:	4b32      	ldr	r3, [pc, #200]	; (80003ec <main+0x214>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a31      	ldr	r2, [pc, #196]	; (80003ec <main+0x214>)
 8000326:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800032a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<30);
	GPIOA->MODER &=~(1U<<31);
*/

	/*Set PINC13 as input pin*/
	GPIOC->MODER &=~(1U<<26);
 800032c:	4b30      	ldr	r3, [pc, #192]	; (80003f0 <main+0x218>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a2f      	ldr	r2, [pc, #188]	; (80003f0 <main+0x218>)
 8000332:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8000336:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<27);
 8000338:	4b2d      	ldr	r3, [pc, #180]	; (80003f0 <main+0x218>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a2c      	ldr	r2, [pc, #176]	; (80003f0 <main+0x218>)
 800033e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000342:	6013      	str	r3, [r2, #0]

	/*Set PINC12 as input pin*/
	GPIOC->MODER &=~(1U<<24);
 8000344:	4b2a      	ldr	r3, [pc, #168]	; (80003f0 <main+0x218>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a29      	ldr	r2, [pc, #164]	; (80003f0 <main+0x218>)
 800034a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800034e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<25);
 8000350:	4b27      	ldr	r3, [pc, #156]	; (80003f0 <main+0x218>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a26      	ldr	r2, [pc, #152]	; (80003f0 <main+0x218>)
 8000356:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800035a:	6013      	str	r3, [r2, #0]

	/*Set PINC11 as input pin*/
	GPIOC->MODER &=~(1U<<22);
 800035c:	4b24      	ldr	r3, [pc, #144]	; (80003f0 <main+0x218>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a23      	ldr	r2, [pc, #140]	; (80003f0 <main+0x218>)
 8000362:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000366:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<23);
 8000368:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <main+0x218>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a20      	ldr	r2, [pc, #128]	; (80003f0 <main+0x218>)
 800036e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000372:	6013      	str	r3, [r2, #0]

	/*Set PINC10 as input pin*/
	GPIOC->MODER &=~(1U<<20);
 8000374:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <main+0x218>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a1d      	ldr	r2, [pc, #116]	; (80003f0 <main+0x218>)
 800037a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800037e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &=~(1U<<21);
 8000380:	4b1b      	ldr	r3, [pc, #108]	; (80003f0 <main+0x218>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a1a      	ldr	r2, [pc, #104]	; (80003f0 <main+0x218>)
 8000386:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800038a:	6013      	str	r3, [r2, #0]

    while(1) {

        if (GPIOC->IDR &  0b0010000000000000) { //0x 2 0 0 0 -> 0x 0010 0000 00000 0000
 800038c:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <main+0x218>)
 800038e:	691b      	ldr	r3, [r3, #16]
 8000390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000394:	2b00      	cmp	r3, #0
 8000396:	d002      	beq.n	800039e <main+0x1c6>
            loop_test_porta_clear();
 8000398:	f000 f9c4 	bl	8000724 <loop_test_porta_clear>
 800039c:	e001      	b.n	80003a2 <main+0x1ca>
        } else {
        	loop_test_one_porta();
 800039e:	f000 f829 	bl	80003f4 <loop_test_one_porta>
        }

        //check the next button

        if (GPIOC->IDR &  0b0001000000000000) {
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <main+0x218>)
 80003a4:	691b      	ldr	r3, [r3, #16]
 80003a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d002      	beq.n	80003b4 <main+0x1dc>
            loop_test_porta_clear();
 80003ae:	f000 f9b9 	bl	8000724 <loop_test_porta_clear>
 80003b2:	e001      	b.n	80003b8 <main+0x1e0>
        } else {
        	loop_test_two_porta();
 80003b4:	f000 f884 	bl	80004c0 <loop_test_two_porta>
        }


        if (GPIOC->IDR &  0b0000100000000000) {
 80003b8:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <main+0x218>)
 80003ba:	691b      	ldr	r3, [r3, #16]
 80003bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d002      	beq.n	80003ca <main+0x1f2>
            loop_test_porta_clear();
 80003c4:	f000 f9ae 	bl	8000724 <loop_test_porta_clear>
 80003c8:	e001      	b.n	80003ce <main+0x1f6>
        } else {
        	loop_test_three_porta();
 80003ca:	f000 f8df 	bl	800058c <loop_test_three_porta>
        }

        if (GPIOC->IDR &  0b0000010000000000) {
 80003ce:	4b08      	ldr	r3, [pc, #32]	; (80003f0 <main+0x218>)
 80003d0:	691b      	ldr	r3, [r3, #16]
 80003d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d002      	beq.n	80003e0 <main+0x208>
            loop_test_porta_clear();
 80003da:	f000 f9a3 	bl	8000724 <loop_test_porta_clear>
 80003de:	e7d5      	b.n	800038c <main+0x1b4>
        } else {
        	loop_test_four_porta();
 80003e0:	f000 f93a 	bl	8000658 <loop_test_four_porta>
        if (GPIOC->IDR &  0b0010000000000000) { //0x 2 0 0 0 -> 0x 0010 0000 00000 0000
 80003e4:	e7d2      	b.n	800038c <main+0x1b4>
 80003e6:	bf00      	nop
 80003e8:	40023800 	.word	0x40023800
 80003ec:	40020000 	.word	0x40020000
 80003f0:	40020800 	.word	0x40020800

080003f4 <loop_test_one_porta>:

    }

}

void loop_test_one_porta(void) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
    GPIOA->BSRR = 0b00000000000000000010000000000000;
    my_delay_long();
    loop_test_porta_clear();
*/
	//A12
    GPIOA->BSRR = 0b00000000000000000001000000000000;
 80003f8:	4b30      	ldr	r3, [pc, #192]	; (80004bc <loop_test_one_porta+0xc8>)
 80003fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80003fe:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000400:	f000 f99e 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 8000404:	f000 f98e 	bl	8000724 <loop_test_porta_clear>

	//A11
    GPIOA->BSRR = 0b00000000000000000000100000000000;
 8000408:	4b2c      	ldr	r3, [pc, #176]	; (80004bc <loop_test_one_porta+0xc8>)
 800040a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800040e:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000410:	f000 f996 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 8000414:	f000 f986 	bl	8000724 <loop_test_porta_clear>

	//A10
    GPIOA->BSRR = 0b00000000000000000000010000000000;
 8000418:	4b28      	ldr	r3, [pc, #160]	; (80004bc <loop_test_one_porta+0xc8>)
 800041a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800041e:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000420:	f000 f98e 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 8000424:	f000 f97e 	bl	8000724 <loop_test_porta_clear>

	//A9
    GPIOA->BSRR = 0b00000000000000000000001000000000;
 8000428:	4b24      	ldr	r3, [pc, #144]	; (80004bc <loop_test_one_porta+0xc8>)
 800042a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800042e:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000430:	f000 f986 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 8000434:	f000 f976 	bl	8000724 <loop_test_porta_clear>

	//A8
    GPIOA->BSRR = 0b00000000000000000000000100000000;
 8000438:	4b20      	ldr	r3, [pc, #128]	; (80004bc <loop_test_one_porta+0xc8>)
 800043a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800043e:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000440:	f000 f97e 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 8000444:	f000 f96e 	bl	8000724 <loop_test_porta_clear>

	//A7
    GPIOA->BSRR = 0b00000000000000000000000010000000;
 8000448:	4b1c      	ldr	r3, [pc, #112]	; (80004bc <loop_test_one_porta+0xc8>)
 800044a:	2280      	movs	r2, #128	; 0x80
 800044c:	619a      	str	r2, [r3, #24]
    my_delay_long();
 800044e:	f000 f977 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 8000452:	f000 f967 	bl	8000724 <loop_test_porta_clear>

    //A6
    GPIOA->BSRR = 0b00000000000000000000000001000000;
 8000456:	4b19      	ldr	r3, [pc, #100]	; (80004bc <loop_test_one_porta+0xc8>)
 8000458:	2240      	movs	r2, #64	; 0x40
 800045a:	619a      	str	r2, [r3, #24]
    my_delay_long();
 800045c:	f000 f970 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 8000460:	f000 f960 	bl	8000724 <loop_test_porta_clear>

    //A5
    GPIOA->BSRR = 0b00000000000000000000000000100000;
 8000464:	4b15      	ldr	r3, [pc, #84]	; (80004bc <loop_test_one_porta+0xc8>)
 8000466:	2220      	movs	r2, #32
 8000468:	619a      	str	r2, [r3, #24]
    my_delay_long();
 800046a:	f000 f969 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 800046e:	f000 f959 	bl	8000724 <loop_test_porta_clear>

    //A4
    GPIOA->BSRR = 0b00000000000000000000000000010000;
 8000472:	4b12      	ldr	r3, [pc, #72]	; (80004bc <loop_test_one_porta+0xc8>)
 8000474:	2210      	movs	r2, #16
 8000476:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000478:	f000 f962 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 800047c:	f000 f952 	bl	8000724 <loop_test_porta_clear>

    //A3
    GPIOA->BSRR = 0b00000000000000000000000000001000;
 8000480:	4b0e      	ldr	r3, [pc, #56]	; (80004bc <loop_test_one_porta+0xc8>)
 8000482:	2208      	movs	r2, #8
 8000484:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000486:	f000 f95b 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 800048a:	f000 f94b 	bl	8000724 <loop_test_porta_clear>

    //A2
    GPIOA->BSRR = 0b00000000000000000000000000000100;
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <loop_test_one_porta+0xc8>)
 8000490:	2204      	movs	r2, #4
 8000492:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000494:	f000 f954 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 8000498:	f000 f944 	bl	8000724 <loop_test_porta_clear>

    //A1
    GPIOA->BSRR = 0b00000000000000000000000000000010;
 800049c:	4b07      	ldr	r3, [pc, #28]	; (80004bc <loop_test_one_porta+0xc8>)
 800049e:	2202      	movs	r2, #2
 80004a0:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80004a2:	f000 f94d 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 80004a6:	f000 f93d 	bl	8000724 <loop_test_porta_clear>

    //A0
    GPIOA->BSRR = 0b00000000000000000000000000000001;
 80004aa:	4b04      	ldr	r3, [pc, #16]	; (80004bc <loop_test_one_porta+0xc8>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80004b0:	f000 f946 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 80004b4:	f000 f936 	bl	8000724 <loop_test_porta_clear>

}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40020000 	.word	0x40020000

080004c0 <loop_test_two_porta>:

void loop_test_two_porta(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0

	//A10
    GPIOA->BSRR = 0b00000000000000000000010000000000;
 80004c4:	4b30      	ldr	r3, [pc, #192]	; (8000588 <loop_test_two_porta+0xc8>)
 80004c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004ca:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80004cc:	f000 f938 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 80004d0:	f000 f928 	bl	8000724 <loop_test_porta_clear>

	//A9
    GPIOA->BSRR = 0b00000000000000000000001000000000;
 80004d4:	4b2c      	ldr	r3, [pc, #176]	; (8000588 <loop_test_two_porta+0xc8>)
 80004d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004da:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80004dc:	f000 f930 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 80004e0:	f000 f920 	bl	8000724 <loop_test_porta_clear>

	//A7
    GPIOA->BSRR = 0b00000000000000000000000010000000;
 80004e4:	4b28      	ldr	r3, [pc, #160]	; (8000588 <loop_test_two_porta+0xc8>)
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80004ea:	f000 f929 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 80004ee:	f000 f919 	bl	8000724 <loop_test_porta_clear>

    //A6
    GPIOA->BSRR = 0b00000000000000000000000001000000;
 80004f2:	4b25      	ldr	r3, [pc, #148]	; (8000588 <loop_test_two_porta+0xc8>)
 80004f4:	2240      	movs	r2, #64	; 0x40
 80004f6:	619a      	str	r2, [r3, #24]
    my_delay_long();
 80004f8:	f000 f922 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 80004fc:	f000 f912 	bl	8000724 <loop_test_porta_clear>

	//A8
    GPIOA->BSRR = 0b00000000000000000000000100000000;
 8000500:	4b21      	ldr	r3, [pc, #132]	; (8000588 <loop_test_two_porta+0xc8>)
 8000502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000506:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000508:	f000 f91a 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 800050c:	f000 f90a 	bl	8000724 <loop_test_porta_clear>

	//A11
    GPIOA->BSRR = 0b00000000000000000000100000000000;
 8000510:	4b1d      	ldr	r3, [pc, #116]	; (8000588 <loop_test_two_porta+0xc8>)
 8000512:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000516:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000518:	f000 f912 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 800051c:	f000 f902 	bl	8000724 <loop_test_porta_clear>

   //A5
    GPIOA->BSRR = 0b00000000000000000000000000100000;
 8000520:	4b19      	ldr	r3, [pc, #100]	; (8000588 <loop_test_two_porta+0xc8>)
 8000522:	2220      	movs	r2, #32
 8000524:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000526:	f000 f90b 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 800052a:	f000 f8fb 	bl	8000724 <loop_test_porta_clear>

    //A3
    GPIOA->BSRR = 0b00000000000000000000000000001000;
 800052e:	4b16      	ldr	r3, [pc, #88]	; (8000588 <loop_test_two_porta+0xc8>)
 8000530:	2208      	movs	r2, #8
 8000532:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000534:	f000 f904 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 8000538:	f000 f8f4 	bl	8000724 <loop_test_porta_clear>

	//A12
    GPIOA->BSRR = 0b00000000000000000001000000000000;
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <loop_test_two_porta+0xc8>)
 800053e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000542:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000544:	f000 f8fc 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 8000548:	f000 f8ec 	bl	8000724 <loop_test_porta_clear>

    //A2
    GPIOA->BSRR = 0b00000000000000000000000000000100;
 800054c:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <loop_test_two_porta+0xc8>)
 800054e:	2204      	movs	r2, #4
 8000550:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000552:	f000 f8f5 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 8000556:	f000 f8e5 	bl	8000724 <loop_test_porta_clear>

    //A4
    GPIOA->BSRR = 0b00000000000000000000000000010000;
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <loop_test_two_porta+0xc8>)
 800055c:	2210      	movs	r2, #16
 800055e:	619a      	str	r2, [r3, #24]
    my_delay_long();
 8000560:	f000 f8ee 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 8000564:	f000 f8de 	bl	8000724 <loop_test_porta_clear>

    //A0
    GPIOA->BSRR = 0b00000000000000000000000000000001;
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <loop_test_two_porta+0xc8>)
 800056a:	2201      	movs	r2, #1
 800056c:	619a      	str	r2, [r3, #24]
    my_delay_long();
 800056e:	f000 f8e7 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 8000572:	f000 f8d7 	bl	8000724 <loop_test_porta_clear>

    //A1
    GPIOA->BSRR = 0b00000000000000000000000000000010;
 8000576:	4b04      	ldr	r3, [pc, #16]	; (8000588 <loop_test_two_porta+0xc8>)
 8000578:	2202      	movs	r2, #2
 800057a:	619a      	str	r2, [r3, #24]
    my_delay_long();
 800057c:	f000 f8e0 	bl	8000740 <my_delay_long>
    loop_test_porta_clear();
 8000580:	f000 f8d0 	bl	8000724 <loop_test_porta_clear>

}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40020000 	.word	0x40020000

0800058c <loop_test_three_porta>:


void loop_test_three_porta(void) {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0

	//A10
    GPIOA->BSRR = 0b00000000000000000000010000000000;
 8000590:	4b30      	ldr	r3, [pc, #192]	; (8000654 <loop_test_three_porta+0xc8>)
 8000592:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000596:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000598:	f000 f8e8 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 800059c:	f000 f8c2 	bl	8000724 <loop_test_porta_clear>

	//A9
    GPIOA->BSRR = 0b00000000000000000000001000000000;
 80005a0:	4b2c      	ldr	r3, [pc, #176]	; (8000654 <loop_test_three_porta+0xc8>)
 80005a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005a6:	619a      	str	r2, [r3, #24]
    my_delay_short();
 80005a8:	f000 f8e0 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 80005ac:	f000 f8ba 	bl	8000724 <loop_test_porta_clear>

	//A7
    GPIOA->BSRR = 0b00000000000000000000000010000000;
 80005b0:	4b28      	ldr	r3, [pc, #160]	; (8000654 <loop_test_three_porta+0xc8>)
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	619a      	str	r2, [r3, #24]
    my_delay_short();
 80005b6:	f000 f8d9 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 80005ba:	f000 f8b3 	bl	8000724 <loop_test_porta_clear>

    //A6
    GPIOA->BSRR = 0b00000000000000000000000001000000;
 80005be:	4b25      	ldr	r3, [pc, #148]	; (8000654 <loop_test_three_porta+0xc8>)
 80005c0:	2240      	movs	r2, #64	; 0x40
 80005c2:	619a      	str	r2, [r3, #24]
    my_delay_short();
 80005c4:	f000 f8d2 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 80005c8:	f000 f8ac 	bl	8000724 <loop_test_porta_clear>

	//A8
    GPIOA->BSRR = 0b00000000000000000000000100000000;
 80005cc:	4b21      	ldr	r3, [pc, #132]	; (8000654 <loop_test_three_porta+0xc8>)
 80005ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005d2:	619a      	str	r2, [r3, #24]
    my_delay_short();
 80005d4:	f000 f8ca 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 80005d8:	f000 f8a4 	bl	8000724 <loop_test_porta_clear>

	//A11
    GPIOA->BSRR = 0b00000000000000000000100000000000;
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <loop_test_three_porta+0xc8>)
 80005de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005e2:	619a      	str	r2, [r3, #24]
    my_delay_short();
 80005e4:	f000 f8c2 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 80005e8:	f000 f89c 	bl	8000724 <loop_test_porta_clear>

   //A5
    GPIOA->BSRR = 0b00000000000000000000000000100000;
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <loop_test_three_porta+0xc8>)
 80005ee:	2220      	movs	r2, #32
 80005f0:	619a      	str	r2, [r3, #24]
    my_delay_short();
 80005f2:	f000 f8bb 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 80005f6:	f000 f895 	bl	8000724 <loop_test_porta_clear>

    //A3
    GPIOA->BSRR = 0b00000000000000000000000000001000;
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <loop_test_three_porta+0xc8>)
 80005fc:	2208      	movs	r2, #8
 80005fe:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000600:	f000 f8b4 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 8000604:	f000 f88e 	bl	8000724 <loop_test_porta_clear>

	//A12
    GPIOA->BSRR = 0b00000000000000000001000000000000;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <loop_test_three_porta+0xc8>)
 800060a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800060e:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000610:	f000 f8ac 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 8000614:	f000 f886 	bl	8000724 <loop_test_porta_clear>

    //A2
    GPIOA->BSRR = 0b00000000000000000000000000000100;
 8000618:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <loop_test_three_porta+0xc8>)
 800061a:	2204      	movs	r2, #4
 800061c:	619a      	str	r2, [r3, #24]
    my_delay_short();
 800061e:	f000 f8a5 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 8000622:	f000 f87f 	bl	8000724 <loop_test_porta_clear>

    //A4
    GPIOA->BSRR = 0b00000000000000000000000000010000;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <loop_test_three_porta+0xc8>)
 8000628:	2210      	movs	r2, #16
 800062a:	619a      	str	r2, [r3, #24]
    my_delay_short();
 800062c:	f000 f89e 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 8000630:	f000 f878 	bl	8000724 <loop_test_porta_clear>

    //A0
    GPIOA->BSRR = 0b00000000000000000000000000000001;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <loop_test_three_porta+0xc8>)
 8000636:	2201      	movs	r2, #1
 8000638:	619a      	str	r2, [r3, #24]
    my_delay_short();
 800063a:	f000 f897 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 800063e:	f000 f871 	bl	8000724 <loop_test_porta_clear>

    //A1
    GPIOA->BSRR = 0b00000000000000000000000000000010;
 8000642:	4b04      	ldr	r3, [pc, #16]	; (8000654 <loop_test_three_porta+0xc8>)
 8000644:	2202      	movs	r2, #2
 8000646:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000648:	f000 f890 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 800064c:	f000 f86a 	bl	8000724 <loop_test_porta_clear>

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40020000 	.word	0x40020000

08000658 <loop_test_four_porta>:


void loop_test_four_porta(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0

    //A3
    GPIOA->BSRR = 0b00000000000000000000000000001000;
 800065c:	4b30      	ldr	r3, [pc, #192]	; (8000720 <loop_test_four_porta+0xc8>)
 800065e:	2208      	movs	r2, #8
 8000660:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000662:	f000 f883 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 8000666:	f000 f85d 	bl	8000724 <loop_test_porta_clear>

	//A7
    GPIOA->BSRR = 0b00000000000000000000000010000000;
 800066a:	4b2d      	ldr	r3, [pc, #180]	; (8000720 <loop_test_four_porta+0xc8>)
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000670:	f000 f87c 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 8000674:	f000 f856 	bl	8000724 <loop_test_porta_clear>

    //A6
    GPIOA->BSRR = 0b00000000000000000000000001000000;
 8000678:	4b29      	ldr	r3, [pc, #164]	; (8000720 <loop_test_four_porta+0xc8>)
 800067a:	2240      	movs	r2, #64	; 0x40
 800067c:	619a      	str	r2, [r3, #24]
    my_delay_short();
 800067e:	f000 f875 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 8000682:	f000 f84f 	bl	8000724 <loop_test_porta_clear>

	//A8
    GPIOA->BSRR = 0b00000000000000000000000100000000;
 8000686:	4b26      	ldr	r3, [pc, #152]	; (8000720 <loop_test_four_porta+0xc8>)
 8000688:	f44f 7280 	mov.w	r2, #256	; 0x100
 800068c:	619a      	str	r2, [r3, #24]
    my_delay_short();
 800068e:	f000 f86d 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 8000692:	f000 f847 	bl	8000724 <loop_test_porta_clear>

	//A9
    GPIOA->BSRR = 0b00000000000000000000001000000000;
 8000696:	4b22      	ldr	r3, [pc, #136]	; (8000720 <loop_test_four_porta+0xc8>)
 8000698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069c:	619a      	str	r2, [r3, #24]
    my_delay_short();
 800069e:	f000 f865 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 80006a2:	f000 f83f 	bl	8000724 <loop_test_porta_clear>

	//A11
    GPIOA->BSRR = 0b00000000000000000000100000000000;
 80006a6:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <loop_test_four_porta+0xc8>)
 80006a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006ac:	619a      	str	r2, [r3, #24]
    my_delay_short();
 80006ae:	f000 f85d 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 80006b2:	f000 f837 	bl	8000724 <loop_test_porta_clear>

	//A10
    GPIOA->BSRR = 0b00000000000000000000010000000000;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <loop_test_four_porta+0xc8>)
 80006b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006bc:	619a      	str	r2, [r3, #24]
    my_delay_short();
 80006be:	f000 f855 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 80006c2:	f000 f82f 	bl	8000724 <loop_test_porta_clear>

    //A0
    GPIOA->BSRR = 0b00000000000000000000000000000001;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <loop_test_four_porta+0xc8>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	619a      	str	r2, [r3, #24]
    my_delay_short();
 80006cc:	f000 f84e 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 80006d0:	f000 f828 	bl	8000724 <loop_test_porta_clear>

	//A12
    GPIOA->BSRR = 0b00000000000000000001000000000000;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <loop_test_four_porta+0xc8>)
 80006d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006da:	619a      	str	r2, [r3, #24]
    my_delay_short();
 80006dc:	f000 f846 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 80006e0:	f000 f820 	bl	8000724 <loop_test_porta_clear>

    //A2
    GPIOA->BSRR = 0b00000000000000000000000000000100;
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <loop_test_four_porta+0xc8>)
 80006e6:	2204      	movs	r2, #4
 80006e8:	619a      	str	r2, [r3, #24]
    my_delay_short();
 80006ea:	f000 f83f 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 80006ee:	f000 f819 	bl	8000724 <loop_test_porta_clear>

    //A4
    GPIOA->BSRR = 0b00000000000000000000000000010000;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <loop_test_four_porta+0xc8>)
 80006f4:	2210      	movs	r2, #16
 80006f6:	619a      	str	r2, [r3, #24]
    my_delay_short();
 80006f8:	f000 f838 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 80006fc:	f000 f812 	bl	8000724 <loop_test_porta_clear>

    //A1
    GPIOA->BSRR = 0b00000000000000000000000000000010;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <loop_test_four_porta+0xc8>)
 8000702:	2202      	movs	r2, #2
 8000704:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000706:	f000 f831 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 800070a:	f000 f80b 	bl	8000724 <loop_test_porta_clear>

    //A5
    GPIOA->BSRR = 0b00000000000000000000000000100000;
 800070e:	4b04      	ldr	r3, [pc, #16]	; (8000720 <loop_test_four_porta+0xc8>)
 8000710:	2220      	movs	r2, #32
 8000712:	619a      	str	r2, [r3, #24]
    my_delay_short();
 8000714:	f000 f82a 	bl	800076c <my_delay_short>
    loop_test_porta_clear();
 8000718:	f000 f804 	bl	8000724 <loop_test_porta_clear>

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40020000 	.word	0x40020000

08000724 <loop_test_porta_clear>:


void loop_test_porta_clear(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
//	GPIOA->BSRR = 0b11111111111111110000000000000000;
	GPIOA->BSRR = 0b00011111111111110000000000000000;
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <loop_test_porta_clear+0x14>)
 800072a:	4a04      	ldr	r2, [pc, #16]	; (800073c <loop_test_porta_clear+0x18>)
 800072c:	619a      	str	r2, [r3, #24]
    my_delay_short();
 800072e:	f000 f81d 	bl	800076c <my_delay_short>
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40020000 	.word	0x40020000
 800073c:	1fff0000 	.word	0x1fff0000

08000740 <my_delay_long>:

void my_delay_long(void) {
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
    for(int i=0;i<1000000;i++){
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	e002      	b.n	8000752 <my_delay_long+0x12>
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3301      	adds	r3, #1
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <my_delay_long+0x28>)
 8000756:	4293      	cmp	r3, r2
 8000758:	ddf8      	ble.n	800074c <my_delay_long+0xc>
		//do nothing
	}
}
 800075a:	bf00      	nop
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	000f423f 	.word	0x000f423f

0800076c <my_delay_short>:

void my_delay_short(void) {
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
    for(int i=0;i<100000;i++){
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	e002      	b.n	800077e <my_delay_short+0x12>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3301      	adds	r3, #1
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <my_delay_short+0x28>)
 8000782:	4293      	cmp	r3, r2
 8000784:	ddf8      	ble.n	8000778 <my_delay_short+0xc>
		//do nothing
	}
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	0001869f 	.word	0x0001869f

08000798 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800079a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800079c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a0:	480c      	ldr	r0, [pc, #48]	; (80007d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007a2:	490d      	ldr	r1, [pc, #52]	; (80007d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <LoopForever+0xe>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b8:	4c0a      	ldr	r4, [pc, #40]	; (80007e4 <LoopForever+0x16>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007c6:	f000 f811 	bl	80007ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ca:	f7ff fd05 	bl	80001d8 <main>

080007ce <LoopForever>:

LoopForever:
  b LoopForever
 80007ce:	e7fe      	b.n	80007ce <LoopForever>
  ldr   r0, =_estack
 80007d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007dc:	08000854 	.word	0x08000854
  ldr r2, =_sbss
 80007e0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007e4:	2000001c 	.word	0x2000001c

080007e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC_IRQHandler>
	...

080007ec <__libc_init_array>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	4d0d      	ldr	r5, [pc, #52]	; (8000824 <__libc_init_array+0x38>)
 80007f0:	4c0d      	ldr	r4, [pc, #52]	; (8000828 <__libc_init_array+0x3c>)
 80007f2:	1b64      	subs	r4, r4, r5
 80007f4:	10a4      	asrs	r4, r4, #2
 80007f6:	2600      	movs	r6, #0
 80007f8:	42a6      	cmp	r6, r4
 80007fa:	d109      	bne.n	8000810 <__libc_init_array+0x24>
 80007fc:	4d0b      	ldr	r5, [pc, #44]	; (800082c <__libc_init_array+0x40>)
 80007fe:	4c0c      	ldr	r4, [pc, #48]	; (8000830 <__libc_init_array+0x44>)
 8000800:	f000 f818 	bl	8000834 <_init>
 8000804:	1b64      	subs	r4, r4, r5
 8000806:	10a4      	asrs	r4, r4, #2
 8000808:	2600      	movs	r6, #0
 800080a:	42a6      	cmp	r6, r4
 800080c:	d105      	bne.n	800081a <__libc_init_array+0x2e>
 800080e:	bd70      	pop	{r4, r5, r6, pc}
 8000810:	f855 3b04 	ldr.w	r3, [r5], #4
 8000814:	4798      	blx	r3
 8000816:	3601      	adds	r6, #1
 8000818:	e7ee      	b.n	80007f8 <__libc_init_array+0xc>
 800081a:	f855 3b04 	ldr.w	r3, [r5], #4
 800081e:	4798      	blx	r3
 8000820:	3601      	adds	r6, #1
 8000822:	e7f2      	b.n	800080a <__libc_init_array+0x1e>
 8000824:	0800084c 	.word	0x0800084c
 8000828:	0800084c 	.word	0x0800084c
 800082c:	0800084c 	.word	0x0800084c
 8000830:	08000850 	.word	0x08000850

08000834 <_init>:
 8000834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000836:	bf00      	nop
 8000838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800083a:	bc08      	pop	{r3}
 800083c:	469e      	mov	lr, r3
 800083e:	4770      	bx	lr

08000840 <_fini>:
 8000840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000842:	bf00      	nop
 8000844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000846:	bc08      	pop	{r3}
 8000848:	469e      	mov	lr, r3
 800084a:	4770      	bx	lr
